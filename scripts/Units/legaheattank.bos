#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

//piece  base, flare, turret, sleeve, barrel, gun, turretl, barrell, flarel, turretr, barrelr, flarer;
//piece base, turretBase, gun, gearR, gearL, coverR, coverL;
piece base, turretBase, turretStrut, gun, flarer, flarel;

// static-var  statechg_DesiredState, statechg_StateChanging, restore_delay, whichGun, 
// gameframe, gameFrame1, targetswap, isfiring, oldhead, timer, lastfired, firetime, nowState;

// Signal definitions
#define SIG_AIM				2
#define SIG_LIGHT			4
#define SIG_RESTORE			8

//-------------------------------CONSTANT maxaccTURRET TURNING---------------------------
// speed and maxaccare in degrees per frame (not second!)
// Jerk is the minimum velocity of the turret
// A high precision requirement can result in overshoots if desired 
// (c) CC BY NC ND Beherith mysterme@gmail.com
//#define MAX_AIMY1_VELOCITY <3.00>
#define AIMY1_maxacc<0.16>
//#define AIMY1_JERK <0.5>
//#define AIMY1_PRECISION <1.2>
//#define AIMY1_RESTORE_SPEED <1.0>

static-var timetozero, deceleratethreshold;
//static-var Stunned;

static-var  restore_delay, whichGun, timer, lastfired, gameframe, nowState, statechg_DesiredState, statechg_StateChanging, firetime;
static-var oldhead, aimy1delta, aimy1velocity, aimy1target, aimy1position, gameFrame1, targetswap, isfiring;


#define BASEPIECE base
#define HITSPEED <55.0>
//how 'heavy' the unit is, on a scale of 1-10
#define UNITSIZE 4
#define MAXTILT 100

deployscript(){
	nowState = 1;
}

undeployscript(){
	signal SIG_AIM;
	nowState = 0;
}

deploy(){

	if(!nowState){
		call-script deployscript();
	}
	nowState = 1;
	
}

undeploy(){
	nowState = 0;
	call-script undeployscript();
}

InitState()
{
	statechg_DesiredState = TRUE;
	statechg_StateChanging = FALSE;
}

RequestState(requestedstate, currentstate)
{
	if( statechg_StateChanging )
	{
		statechg_DesiredState = requestedstate;
		return (0);
	}
	statechg_StateChanging = TRUE;
	currentstate = statechg_DesiredState;
	statechg_DesiredState = requestedstate;
	while( statechg_DesiredState != currentstate )
	{
		if( statechg_DesiredState == 0 )
		{
			call-script deploy();
			currentstate = 0;
		}
		if( statechg_DesiredState == 1 )
		{
			call-script undeploy();
			currentstate = 1;		
		}
	}
	statechg_StateChanging = FALSE;
}

Activate()
{
	start-script RequestState(0);
}

Deactivate()
{
	signal SIG_AIM;
	start-script RequestState(1);
}

lua_UnitScriptLight(lightIndex, count)
{
	return 0;
}

Create()
{
	//hide flare;
	// hide flarer;
	// hide flarel;
	firetime = 75;
	oldhead = 0;
	targetswap = 0;
	nowState=1;
	call-script InitState();
	isfiring = 0;
	
	lastfired = get(GAME_FRAME)-200;
	whichGun = 0;
	restore_delay = 4000;
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 250;
	}
	start-script SweepFire();
}

// SetMaxReloadTime(Func_Var_1)
// {
// 	restore_delay = Func_Var_1 * 2;
// 	return (0);
// }

static-var  Stunned;
ExecuteRestoreAfterDelay()
{
    if (Stunned) {
        return (1);
    }

	gameframe = get(GAME_FRAME);
	isfiring = 0;
	oldhead = -1000000;
	timer = 0;
	targetswap = 0;

	if(nowState == 1){
		turn turretBase to y-axis <0.000000> speed <40>;
		turn turretStrut to x-axis <0.000000> speed <40>;
	}
	//stop-spin barrelMid around z-axis decelerate <5>;
	//wait-for-turn turretBase around y-axis;
	//start-script RequestState(1);
	//call-script undeploy();
	// turn turretr to y-axis <0.000000> speed <120>;
	// turn turretl to y-axis <0.000000> speed <120>;
	return (0);
}

SetStunned(State)
{
    Stunned = State;
	if (!Stunned) {
	    start-script ExecuteRestoreAfterDelay();
	}
}

RestoreAfterDelay()
{
	signal SIG_RESTORE;
	set-signal-mask SIG_RESTORE;

	set-signal-mask SIG_AIM;
	sleep restore_delay;
	start-script ExecuteRestoreAfterDelay();
}

AimPrimary(heading, pitch)
{
	// signal SIG_AIM;
	// set-signal-mask SIG_AIM;
	// //start-script RequestState(0);
	// call-script deploy();
	// turn turretBase to y-axis heading speed <80>;
	// turn turretStrut to x-axis <0.000000> - pitch speed <80>;
	// wait-for-turn turretBase around y-axis;
	// wait-for-turn turretStrut around x-axis;
	// start-script RestoreAfterDelay();
	// return (1);



	if (nowState==0) return 0;
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	turn turretBase to y-axis heading speed <25>;
	turn turretStrut to x-axis -1*pitch speed <10>;
	if (get ABS(oldhead - heading) > 500)
	{
		targetswap = 1;
	}
	gameframe = get(GAME_FRAME);
	//get PRINT(1, lastfired, gameframe);
	//if (lastfired+firetime>gameframe) return (0);
	//lastfired = gameframe;
	
	if (get ABS(oldhead - heading) < 500)
	{
		//skip the wait just do it
		oldhead = heading;
		isfiring = 1;
		start-script RestoreAfterDelay();
		return (1);
	}
	
	wait-for-turn turretBase around y-axis;
	wait-for-turn turretStrut around x-axis;
	start-script RestoreAfterDelay();
	isfiring = 1;
	oldhead = heading;
	return (1);
}

SweepFire()
{
	signal SIG_LIGHT;
	set-signal-mask SIG_LIGHT;
	while (TRUE)
	{
		gameframe = get(GAME_FRAME);
		//get PRINT(123, lastfired, gameframe, gameframe);
		//get PRINT(1235, targetswap, isfiring, timer);
		if (targetswap == 1 AND isfiring == 1 AND lastfired+firetime>gameframe)
		{
			emit-sfx 2048 from flarel;
			timer = timer + 1;
		}
		if (timer > 150)
		{
			//signal SIG_AIM;
			//timer = 0;
			start-script RestoreAfterDelay();
		}
		sleep 20;
	}
}

FirePrimary()
{
	
	// if (whichGun == 0){
	// 	gameframe = get(GAME_FRAME);
	// 	lastfired = gameframe;
	// 	timer = 0;
	// 	//emit-sfx 1024 + 0  from flarer;
	// 	call-script lua_UnitScriptLight(1, whichGun);
	// 	start-script RestoreAfterDelay();
	// 	whichGun = 1;
	// 	return(1);
	// }

	// if (whichGun == 1){
	// 	gameframe = get(GAME_FRAME);
	// 	lastfired = gameframe;
	// 	timer = 0;
	// 	//emit-sfx 1024 + 0  from flarer;
	// 	call-script lua_UnitScriptLight(2, whichGun);
	// 	start-script RestoreAfterDelay();
	// 	whichGun = 0;
	// 	return(1);
	// }
	// //emit-sfx 1024 + 0 from flare;

	// // move sleeve to z-axis [-3.000000] speed [1250.000000];
	// // move barrel to z-axis [-6.000000] speed [1250.000000];
	// // wait-for-move sleeve along z-axis;
	// // move barrel to z-axis [0.000000] speed [7.500000];
	// // move sleeve to z-axis [0.000000] speed [7.500000];
	// return (1);

	gameframe = get(GAME_FRAME);
	//get PRINT(1, lastfired, gameframe);
	//if (lastfired+firetime>gameframe) return (0);
	lastfired = gameframe;
	//get PRINT(11);
	//start-script SpinFiring();
	timer = 0;
	//start-script Enlighten();
	//sleep 150;
	start-script RestoreAfterDelay();
	//shotcount = shotcount + 1;
	call-script lua_UnitScriptLight(1, whichGun);
	return (1);
}

AimFromPrimary(piecenum)
{
	piecenum = gun;
	//return (0);
}

QueryPrimary(piecenum)
{
	if (whichGun == 0){
		piecenum = flarer;
		//whichGun = 1;
	}

	if (whichGun == 1){
		piecenum = flarel;
		//whichGun = 0;
	}
	//return (0);
}

// AimSecondary(heading, pitch)
// {
// 	signal SIG_AIM_2;
// 	set-signal-mask SIG_AIM_2;
// 	turn turretl to y-axis heading speed <180>;
// 	turn barrell to x-axis <0.000000> - pitch speed <60>;
// 	wait-for-turn turretl around y-axis;
// 	wait-for-turn barrell around x-axis;
// 	start-script RestoreAfterDelay();
// 	return (1);
// }

// FireSecondary()
// {
// 	show flarel;
// 	sleep 100;
// 	hide flarel;
// }

// AimFromSecondary(piecenum)
// {
// 	piecenum = barrell;
// 	return (0);
// }

// QuerySecondary(piecenum)
// {
// 	piecenum = flarel;
// 	return (0);
// }

// AimTertiary(heading, pitch)
// {
// 	signal SIG_AIM_3;
// 	set-signal-mask SIG_AIM_3;
// 	turn turretr to y-axis heading speed <180>;
// 	turn barrelr to x-axis <0.000000> - pitch speed <60>;
// 	wait-for-turn turretr around y-axis;
// 	wait-for-turn barrelr around x-axis;
// 	start-script RestoreAfterDelay();
// 	return (1);
// }

// FireTertiary()
// {
// 	show flarer;
// 	sleep 100;
// 	hide flarer;
// }

// AimFromTertiary(piecenum)
// {
// 	piecenum = barrelr;
// 	return (0);
// }

// QueryTertiary(piecenum)
// {
// 	piecenum = flarer;
// 	return (0);
// }

SweetSpot(piecenum)
{
	piecenum = base;
	return (0);
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1 ;
		// explode base type BITMAPONLY | NOHEATCLOUD;
		// explode turretBase type BITMAPONLY | NOHEATCLOUD;
		// explode barrelPivot type BITMAPONLY | NOHEATCLOUD;
		// explode barrelMid type BITMAPONLY | NOHEATCLOUD;
		// explode barrelBack type FIRE | SMOKE | FALL | NOHEATCLOUD;
		//explode flare type BITMAPONLY | NOHEATCLOUD;
		return(corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2 ;
		// explode base type BITMAPONLY | NOHEATCLOUD;
		// explode turretBase type FIRE | SMOKE | FALL | NOHEATCLOUD;
		// explode barrelPivot type FALL | NOHEATCLOUD;
		// explode barrelMid type FIRE | SMOKE | FALL | NOHEATCLOUD;
		// explode barrelBack type FALL | NOHEATCLOUD;
		//explode flare type FIRE | SMOKE | FALL | NOHEATCLOUD;
		return(corpsetype);
	}
	if( severity <= 99 )
	{
		corpsetype = 3 ;
		// explode base type FIRE | SMOKE | FALL | NOHEATCLOUD;
		// explode turretBase type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		// explode barrelPivot type SMOKE | FALL | NOHEATCLOUD;
		// explode barrelMid type SMOKE | FALL | NOHEATCLOUD;
		// explode barrelBack type EXPLODE_ON_HIT | SMOKE | FALL | NOHEATCLOUD;
		//explode flare type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		return(corpsetype);
	}
	corpsetype = 3 ;
		// explode base type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		// explode turretBase type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		// explode barrelPivot type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		// explode barrelMid type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		// explode barrelBack type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		//explode flare type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
	return corpsetype;
}
