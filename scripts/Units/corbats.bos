#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  flarea, barrelb1, barrelb2, barrelb3, base, guna, turreta, turretb,
       flareb1, flareb2, flareb3, wake, bow, sleeveb1, sleeveb2, sleeveb3, sleevea, barrela1, barrela2, barrela3;

static-var  gun_2, restore_delay, Static_Var_7, Static_Var_8;
static-var reloading_barrel_1, reloading_barrel_2;
static-var deltaheading, newchassisheading, chassisheading, restore_position;
// Signal definitions
#define SIG_AIM_1			2
#define SIG_AIM_2			4
#define SIG_AIM_3			8
#define SIG_AIM_4			16
#define SIG_MOVE			32

#define BASEPIECE base
#define HITSPEED <20.0>
//how 'heavy' the unit is, on a scale of 1-10
#define UNITSIZE 10
#define MAXTILT 200

#include "unit_hitbyweaponid_and_smoke.h"

RockOnWaves()
{
	var rockDir, rockAng, rockSpeed;
	rockDir = <-0.1>;
	rockAng = <-0.1>;
	while( TRUE )
	{
		while( get ABS(rockAng) < <1.11> )
		{
			rockSpeed = <1.25> - get ABS(rockAng);
			turn base to x-axis rockAng speed rockSpeed*2;
			wait-for-turn base around x-axis;
			rockAng = rockAng + rockDir;
		}
		rockDir = 0 - rockDir;
		rockAng = rockAng + rockDir + rockDir;
	}
}


ProjXPW(Func_Var_1, Func_Var_2)
{
	if( Func_Var_2 < -21840 )
	{
		Static_Var_7 = Func_Var_1 * ( Func_Var_2 + 32760 ) / 10920;
	}
	else if( Func_Var_2 > 21840 )
	{
		Static_Var_7 = Func_Var_1 * ( 32760 - Func_Var_2 ) / 10920;
	}
	else if( Func_Var_2 < -10920 )
	{
		Static_Var_7 = 0 - Func_Var_1;
	}
	else if( Func_Var_2 > 10920 )
	{
		Static_Var_7 = Func_Var_1;
	}
	else
	{
		Static_Var_7 = Func_Var_1 * Func_Var_2 / 10920;
	}
}

RockZ(Func_Var_1, Func_Var_2)
{
	signal 64;
	set-signal-mask 64;
	call-script ProjXPW(10920 / Func_Var_2,Func_Var_1);
	Static_Var_8 = Static_Var_8 + Static_Var_7;
	Static_Var_7 = get ABS(Static_Var_8);
	while( Static_Var_7 > 91 )
	{
		turn base to z-axis Static_Var_8 speed Static_Var_7 * 2;
		wait-for-turn base around z-axis;
		Static_Var_8 = Static_Var_8 * -1 / 2;
		Static_Var_7 = get ABS(Static_Var_8);
	}
	turn base to z-axis <0.000000> speed <1.5>;
}

//-------------------------------CONSTANT ACCELERATION TURRET TURNING---------------------------
// MaxVelocity and acceleration are in degrees per frame (not second!)
// Jerk is the minimum velocity of the turret
// A high precision requirement can result in overshoots if desired 
// (c) CC BY NC ND Beherith mysterme@gmail.com
// adjustments by Itanthias
#define MAX_AIMY1_VELOCITY <2.20>
#define AIMY1_ACCELERATION <0.13>
#define AIMY1_SNAP_TOLERANCE <0.5>
#define AIMY1_PRECISION <1.2>
#define AIMY1_RESTORE_SPEED <1.0>

static-var aimy1delta, timetozero, deceleratethreshold;
static-var aimy1velocity, aimy1target, aimy1position, gameFrame;
static-var  Stunned;

ExecuteRestoreAfterDelay()
{
    while (Stunned) {
		sleep 1;
    }

	restore_position = 1;
	turn sleeveb1 to x-axis <0.000000> speed <30.000000>;
	turn sleeveb2 to x-axis <0.000000> speed <30.000000>;
	turn sleeveb3 to x-axis <0.000000> speed <30.000000>;
	
}
SetStunned(State)
{
    Stunned = State;
	if (!Stunned) {
	    start-script ExecuteRestoreAfterDelay();
	}
}
RestoreAfterDelay()
{
	sleep restore_delay;
	start-script ExecuteRestoreAfterDelay();
}

AimControl()
{
	
	//-------------------------------CONSTANT ACCELERATION TURRET TURNING---------------------------
	while( TRUE  ){
		// only turn when not stunned
		if (Stunned == 0){

			// apply correction for chassis turning
			newchassisheading = GET 82; //get heading
			deltaheading = newchassisheading - chassisheading;
			chassisheading = newchassisheading;
			aimy1target = aimy1target - deltaheading;

			// apply aimy1target for neutral, restored, position
			if (restore_position == 1)
			{
				aimy1target = 0;
			}
	
			aimy1delta = aimy1target - aimy1position ; 	
			//Clamp angles between <-180>;<180>
			while (aimy1target >  <180>) aimy1target = aimy1target - <360>;
			while (aimy1target < <-180>) aimy1target = aimy1target + <360>;
			while (aimy1position >  <180>) aimy1position = aimy1position - <360>;
			while (aimy1position < <-180>) aimy1position = aimy1position + <360>;
			while (aimy1delta >  <180>) aimy1delta = aimy1delta - <360>;
			while (aimy1delta < <-180>) aimy1delta = aimy1delta + <360>;
			
			// Snap turret exactly to aimy1target if within snap tolerance
			if (get ABS(aimy1delta) < AIMY1_SNAP_TOLERANCE) {
				aimy1position = aimy1target;
				turn turretb to y-axis aimy1position now;	

				// velocity match to chassis heading change
				if ( (restore_position == 0) ){
					aimy1velocity = (-1)*deltaheading;
					// clamp velocity to max value
					aimy1velocity = get MIN(       MAX_AIMY1_VELOCITY, aimy1velocity); 
					aimy1velocity = get MAX((-1) * MAX_AIMY1_VELOCITY, aimy1velocity);
				}
				else
				{
					aimy1velocity = 0;
				}
			}
			else
			{

				//number of frames required to decelerate to 0
				//account for chassis rotation speed
				timetozero = get ABS(aimy1velocity - deltaheading) / AIMY1_ACCELERATION;
			
				//distance from target where we should start decelerating, always 'positive'
				//pos = t * v - (t*(t-1)*a/2)
				deceleratethreshold = timetozero * (get ABS(aimy1velocity)) - (timetozero * (timetozero - 1) * AIMY1_ACCELERATION / 2); 
			
				if (get ABS(aimy1delta) <= deceleratethreshold){ //we need to decelerate
					if (aimy1velocity > 0) aimy1velocity = aimy1velocity - AIMY1_ACCELERATION;
					else 				   aimy1velocity = aimy1velocity + AIMY1_ACCELERATION;
			
				}	
				else //we need to accelerate
				{
					if (aimy1delta > 0) aimy1velocity = get MIN(       MAX_AIMY1_VELOCITY, aimy1velocity + AIMY1_ACCELERATION); 
					else                aimy1velocity = get MAX((-1) * MAX_AIMY1_VELOCITY, aimy1velocity - AIMY1_ACCELERATION);
				}

				if (get ABS(aimy1velocity) < (2 * AIMY1_SNAP_TOLERANCE) ){
					if (get ABS(aimy1delta) < AIMY1_SNAP_TOLERANCE) aimy1velocity = aimy1delta;
					//if ((aimy1delta >        AIMY1_JERK)) aimy1velocity =        AIMY1_JERK;
					//if ((aimy1delta < (-1) * AIMY1_JERK)) aimy1velocity = (-1) * AIMY1_JERK;
				}
			
				aimy1position = aimy1position + aimy1velocity; 
				turn turretb to y-axis aimy1position now;
			}

		}
		sleep 30;
	}
}

Create()
{
	hide bow;
	hide flareb3;
	hide flareb1;
	hide flareb2;
	hide flarea;
	hide wake;
	hide flarea;
	hide flareb1;
	hide flareb2;
	hide flareb3;
	gun_2 = 1;

	chassisheading = GET 82; //get heading
	newchassisheading = chassisheading;
	deltaheading = 0;

	restore_position = 1;

	aimy1position = 0;
	aimy1target = 0;
	aimy1delta = 0;

	restore_delay = 3000;	
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 500;
	}
	start-script RockOnWaves();
	start-script AimControl();
}

SetMaxReloadTime(Func_Var_1)
{
	restore_delay = Func_Var_1 * 3;
}

AimWeapon1(heading, pitch)
{

	signal SIG_AIM_1;
	set-signal-mask SIG_AIM_1;

	//We can do this any time
	restore_position = 0;
	turn sleeveb1 to x-axis <0.000000> - pitch speed <30.000000>;
	turn sleeveb2 to x-axis <0.000000> - pitch speed <30.000000>;
	turn sleeveb3 to x-axis <0.000000> - pitch speed <30.000000>;
	start-script RestoreAfterDelay();

	// let AimControl know what to aim at
	aimy1target = heading;
	while ( TRUE )
	{
		// condition 1, is aim good?
		aimy1delta = aimy1target - aimy1position ; 	
		if (get ABS(aimy1delta) < AIMY1_PRECISION) {
			return (1); 
		}
		sleep 1;
	}
}

AimWeapon2(heading, pitch)
{
	signal SIG_AIM_2;
	set-signal-mask SIG_AIM_2;
	aimy1target = heading;
	while ( TRUE )
	{
		// condition 1, is aim good?
		aimy1delta = aimy1target - aimy1position ; 	
		if (get ABS(aimy1delta) < AIMY1_PRECISION) {
			// condition 2, is barrel 1 reloading?
			reloading_barrel_1 = (get GAME_FRAME) < (get WEAPON_RELOADSTATE(1));
			if (reloading_barrel_1) {
				return (1); 
			}
		}
		sleep 2;
	}
}

AimWeapon3(heading, pitch)
{
	signal SIG_AIM_3;
	set-signal-mask SIG_AIM_3;
	aimy1target = heading;
	while ( TRUE )
	{
		// condition 1, is aim good?
		aimy1delta = aimy1target - aimy1position; 	
		if (get ABS(aimy1delta) < AIMY1_PRECISION) {
			// condition 2, are barrels 1 and 2 reloading?
			reloading_barrel_1 = (get GAME_FRAME) < (get WEAPON_RELOADSTATE(1));
			reloading_barrel_2 = (get GAME_FRAME) < (get WEAPON_RELOADSTATE(2));
			if (reloading_barrel_1 AND reloading_barrel_2) {
				return (1);
			}
		}
		sleep 3;
	}
}

RestoreLaser()
{
	sleep restore_delay;
	//set-signal-mask 0;
	turn turreta to y-axis <0.000000> speed <100.000000>;
}

waveSplash()
{
	while( TRUE )
	{
		turn base to x-axis <-1.0> speed <1.0>;
		move base to y-axis [0.23] speed [0.17];
		wait-for-turn base around x-axis;
		turn base to x-axis <0.0> speed <1.0>;
		move base to y-axis [0.0] speed [0.17];
		wait-for-turn base around x-axis;
	}
}

StartMoving()
{
	signal SIG_MOVE;
	set-signal-mask SIG_MOVE;
	var waketime;
	start-script waveSplash();
	var bowtime;
	bowtime = 0;
	while( TRUE )
	{
		emit-sfx 1024 + 1 from wake;
		if (bowtime) emit-sfx 1024 + 2 from bow;
        bowtime = !bowtime;
		waketime = (get CURRENT_SPEED) * 100 / get MAX_SPEED;
		if( waketime < 50 ) waketime = 50;
		sleep 12000 / waketime;
	}
}

StopMoving()
{
	signal SIG_MOVE;
	turn base to x-axis <0.0> speed <1.0>;
	move base to y-axis [0.0] speed [0.17];
}

AimWeapon4(heading, pitch)
{
	signal SIG_AIM_4;
	set-signal-mask SIG_AIM_4;
	turn turreta to y-axis heading speed <200.000000>;
	wait-for-turn turreta around y-axis;
	start-script RestoreLaser();
	return (1);
}

FireWeapon4()
{
	if( gun_2 == 0 )
	{
		sleep 250;
		turn guna to z-axis <0.000000> speed <400.000000>;
		wait-for-turn guna around z-axis;
	}
	else if( gun_2 == 1 )
	{
		sleep 250;
		turn guna to z-axis <120.027473> speed <400.000000>;
		wait-for-turn guna around z-axis;
	}
	else if( gun_2 == 2 )
	{
		sleep 250;
		turn guna to z-axis <-120.027473> speed <400.000000>;
		wait-for-turn guna around z-axis;
	}
	++gun_2;
	if( gun_2 >= 3 ) gun_2 = 0;
}

FireWeapon1()
{
	//delays other barrels from firing for 15 frames
	get WEAPON_RELOADSTATE(-2,get MAX(get GAME_FRAME + 15,get WEAPON_RELOADSTATE(2)));
	get WEAPON_RELOADSTATE(-3,get MAX(get GAME_FRAME + 15,get WEAPON_RELOADSTATE(3)));

	start-script RockZ(-13, aimy1position);
	emit-sfx 1024 + 0 from flareb1;
	move barrelb1 to z-axis [-5.00000] now; // [-2.500000]
	sleep 100;
	move barrelb1 to z-axis [0.000000] speed [2.000000];

}

FireWeapon2()
{
	//delays other barrels from firing for 15 frames
	get WEAPON_RELOADSTATE(-1,get MAX(get GAME_FRAME + 15,get WEAPON_RELOADSTATE(1)));
	get WEAPON_RELOADSTATE(-3,get MAX(get GAME_FRAME + 15,get WEAPON_RELOADSTATE(3)));

	start-script RockZ(-13, aimy1position);
	emit-sfx 1024 + 0 from flareb2;
	move barrelb2 to z-axis [-5.000000] now;
	sleep 100;
	move barrelb2 to z-axis [0.000000] speed [2.000000];

}

FireWeapon3()
{
	//delays other barrels from firing for 15 frames
	get WEAPON_RELOADSTATE(-1,get MAX(get GAME_FRAME + 15,get WEAPON_RELOADSTATE(1)));
	get WEAPON_RELOADSTATE(-2,get MAX(get GAME_FRAME + 15,get WEAPON_RELOADSTATE(2)));

	start-script RockZ(-13, aimy1position);
	emit-sfx 1024 + 0 from flareb3;
	move barrelb3 to z-axis [-5.000000] now;
	sleep 100;
	move barrelb3 to z-axis [0.000000] speed [2.000000];

}

AimFromWeapon1(piecenum)
{
	piecenum = turretb;
}

QueryWeapon1(piecenum)
{
	piecenum = flareb1;
}

AimFromWeapon2(piecenum)
{
	piecenum = turretb;
}

QueryWeapon2(piecenum)
{
	piecenum = flareb2;
}

AimFromWeapon3(piecenum)
{
	piecenum = turretb;
}

QueryWeapon3(piecenum)
{
	piecenum = flareb3;
}

AimFromWeapon4(piecenum)
{
	piecenum = turreta;
}

QueryWeapon4(piecenum)
{
	piecenum = flarea;
}

SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode turreta type BITMAPONLY | NOHEATCLOUD;
		explode sleevea type BITMAPONLY | NOHEATCLOUD;
		explode guna type BITMAPONLY | NOHEATCLOUD;
		explode barrela3 type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode barrela2 type BITMAPONLY | NOHEATCLOUD;
		explode barrela1 type BITMAPONLY | NOHEATCLOUD;
		//explode flarea type BITMAPONLY | NOHEATCLOUD;
		//explode turretb type BITMAPONLY | NOHEATCLOUD;
		//explode sleeveb2 type BITMAPONLY | NOHEATCLOUD;
		//explode barrelb2 type BITMAPONLY | NOHEATCLOUD;
		//explode flareb2 type BITMAPONLY | NOHEATCLOUD;
		//explode sleeveb3 type BITMAPONLY | NOHEATCLOUD;
		//explode barrelb3 type BITMAPONLY | NOHEATCLOUD;
		//explode flareb3 type BITMAPONLY | NOHEATCLOUD;
		//explode sleeveb1 type BITMAPONLY | NOHEATCLOUD;
		//explode barrelb1 type BITMAPONLY | NOHEATCLOUD;
		//explode flareb1 type BITMAPONLY | NOHEATCLOUD;
		//explode wake type BITMAPONLY | NOHEATCLOUD;
		return(corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode turreta type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode sleevea type FALL | NOHEATCLOUD;
		explode guna type FALL | NOHEATCLOUD;
		explode barrela3 type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode barrela2 type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode barrela1 type FALL | NOHEATCLOUD;
		//explode flarea type FIRE | SMOKE | FALL | NOHEATCLOUD;
		//explode sleeveb2 type FIRE | SMOKE | FALL | NOHEATCLOUD;
		//explode barrelb2 type FIRE | SMOKE | FALL | NOHEATCLOUD;
		//explode flareb2 type FALL | NOHEATCLOUD;
		//explode sleeveb3 type FIRE | SMOKE | FALL | NOHEATCLOUD;
		//explode barrelb3 type FIRE | SMOKE | FALL | NOHEATCLOUD;
		//explode flareb3 type FIRE | SMOKE | FALL | NOHEATCLOUD;
		//explode sleeveb1 type FIRE | SMOKE | FALL | NOHEATCLOUD;
		//explode barrelb1 type FALL | NOHEATCLOUD;
		//explode flareb1 type FIRE | SMOKE | FALL | NOHEATCLOUD;
		//explode wake type FIRE | SMOKE | FALL | NOHEATCLOUD;
		return(corpsetype);
	}
	if( severity <= 99 )
	{
		corpsetype = 3 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode turreta type EXPLODE_ON_HIT | SMOKE | FALL | NOHEATCLOUD;
		explode sleevea type EXPLODE_ON_HIT | SMOKE | FALL | NOHEATCLOUD;
		explode guna type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode barrela3 type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode barrela2 type EXPLODE_ON_HIT | SMOKE | FALL | NOHEATCLOUD;
		explode barrela1 type EXPLODE_ON_HIT | SMOKE | FALL | NOHEATCLOUD;
		//explode flarea type EXPLODE_ON_HIT | SMOKE | FALL | NOHEATCLOUD;
		//explode turretb type BITMAPONLY | NOHEATCLOUD;
		//explode sleeveb2 type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		//explode barrelb2 type SMOKE | FALL | NOHEATCLOUD;
		//explode flareb2 type SMOKE | FALL | NOHEATCLOUD;
		//explode sleeveb3 type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		//explode barrelb3 type EXPLODE_ON_HIT | SMOKE | FALL | NOHEATCLOUD;
		//explode flareb3 type FIRE | SMOKE | FALL | NOHEATCLOUD;
		//explode sleeveb1 type EXPLODE_ON_HIT | SMOKE | FALL | NOHEATCLOUD;
		//explode barrelb1 type SMOKE | FALL | NOHEATCLOUD;
		//explode flareb1 type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		//explode wake type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		return(corpsetype);
	}
	corpsetype = 3 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode turreta type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode sleevea type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		explode guna type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode barrela3 type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode barrela2 type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode barrela1 type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		//explode flarea type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		//explode turretb type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		//explode sleeveb2 type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		//explode barrelb2 type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		//explode flareb2 type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		//explode sleeveb3 type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		//explode barrelb3 type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		//explode flareb3 type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		//explode sleeveb1 type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		//explode barrelb1 type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		//explode flareb1 type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		//explode wake type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
	return corpsetype;
}
