#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, lid, sleeve, flare1, flare2, flare3, flare4, flare5, flare6, flare7;

static-var  restore_delay, deploy_state, animate_speed, close_speed;
static-var  barrel;
// Signal definitions
#define SIG_AIM				2
#define SIG_DEPLOY			4

static-var  Stunned;
SetStunned(State)
{
    Stunned = State;
	if (!Stunned) {
	    start-script RestoreAfterDelay();
	}
}

RestoreAfterDelay()
{
	sleep restore_delay;
	signal SIG_DEPLOY;
	set-signal-mask SIG_DEPLOY;
	turn lid to z-axis <0> speed <1>*animate_speed;
	move sleeve to y-axis [0] speed [0.133]*animate_speed;
	deploy_state = 0;
	wait-for-turn lid around z-axis;
	set ARMORED to 1;
}

Create()
{
	//hide flare;

	barrel = flare1;

	restore_delay = 2000;
	deploy_state = 0;
	animate_speed = 270;
	//animate_speed = <135>;
	//close_speed = <8.4375>;
	//close_speed = <27>;

	while( get BUILD_PERCENT_LEFT )
	{
		sleep 250;
	}
	set ARMORED to 1;
	//start-script RestoreAfterDelay();
}

#define SMOKEPIECE base
#include "smokeunit_thread_nohit.h"

Deploy()
{
	signal SIG_DEPLOY;
	set-signal-mask SIG_DEPLOY;
	set ARMORED to 0;
	if (deploy_state==0 OR deploy_state==1)
	{
		deploy_state = 1;
		turn lid to z-axis <-45> speed <1>*animate_speed;
		wait-for-turn lid around z-axis;
		deploy_state = 2;
	}
	if (deploy_state==2 OR deploy_state==3)
	{
		deploy_state = 3;
		turn lid to z-axis <-135> speed <1>*animate_speed;
		move sleeve to y-axis [12] speed [0.133]*animate_speed;
		wait-for-turn lid around z-axis;
		deploy_state = 4;
	}

}

AimPrimary(heading, pitch)
{
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	if (get WEAPON_RELOADSTATE(1) < get GAME_FRAME)
	{
		start-script Deploy();
	}
	start-script RestoreAfterDelay();
	while( !(deploy_state==4) )
	{
		sleep 100;
	}
	return (1);
}

Shot1()
{
	sleep 32;
	barrel = barrel + 1;
	if (barrel > flare7)
	{
		barrel = flare1;
		start-script RestoreAfterDelay();
	}
	//start-script RestoreAfterDelay();

}

QueryPrimary(piecenum)
{
	piecenum = barrel;
}

SweetSpot(piecenum)
{
	piecenum = base;
}

AimFromPrimary(piecenum)
{
	piecenum = flare1;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		return(corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2 ;
		explode base type FIRE | SMOKE | FALL | NOHEATCLOUD;
		return(corpsetype);
	}
	if( severity <= 99 )
	{
		corpsetype = 3 ;
		explode base type SMOKE | FALL | NOHEATCLOUD;
		return(corpsetype);
	}
	corpsetype = 3 ;
	explode base type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
	return corpsetype;
}
