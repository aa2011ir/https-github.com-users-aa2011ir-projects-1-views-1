#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, lflare, rflare, thrusta, thrustb;



#define SIG_AIM				2

#define BASEPIECE base
#define HITSPEED <105.0>
//how 'heavy' the unit is, on a scale of 1-10
#define UNITSIZE 5
#define MAXTILT 100

static-var gun_1;

Create()
{
	gun_1 = 0;
	hide lflare;
	hide rflare;
	hide thrusta;
	hide thrustb;
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
}

Activate()
{
	show thrusta;
	show thrustb;
}

Deactivate()
{
	hide thrusta;
	hide thrustb;
}

QueryPrimary(piecenum)
{
	if (gun_1==0)
	{
		piecenum = lflare;
		sleep 500;
		gun_1=1;
	}
	else 
	{
		piecenum = rflare;
		sleep 500;
		gun_1=0;
	}
}

AimFromPrimary(piecenum)
{
	if (gun_1==0)
	{
		piecenum = lflare;
	}
	else 
	{
		piecenum = rflare;
	}
}

AimPrimary(heading, pitch)
{
    signal SIG_AIM;
	set-signal-mask SIG_AIM;
	 	while( 255 > heading )
		{
			set UNKNOWN_UNIT_VALUE(82) to 0 - 1500 + get UNKNOWN_UNIT_VALUE(82);
			heading = heading + 1500;
			sleep 1;
		}
		while( heading > 255 )
		{
			set UNKNOWN_UNIT_VALUE(82) to 1500 + get UNKNOWN_UNIT_VALUE(82);
			heading = heading - 1500;
			sleep 1;
		}	
	return (1);
}

PostFire()
{
    if (gun_1==0)
	{
		show lflare;
		sleep 200;
		hide lflare;
	}
	else 
	{
		show rflare;
		sleep 200;
		hide rflare;
	}

}

FirePrimary()
{
	start-script PostFire();
	return (1);
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode lflare type BITMAPONLY | NOHEATCLOUD;
		return(corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode lflare type FIRE | SMOKE | FALL | NOHEATCLOUD;
		return(corpsetype);
	}
	if( severity <= 99 )
	{
		corpsetype = 3 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode lflare type EXPLODE_ON_HIT | SMOKE | FALL | NOHEATCLOUD;
		return(corpsetype);
	}
	corpsetype = 3 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode lflare type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
	return corpsetype;
}
