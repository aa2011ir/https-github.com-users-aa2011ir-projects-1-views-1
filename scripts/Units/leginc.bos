#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  aimy1, turret, flare, barrel, pelvis, rfhip, rfthigh, rfleg, rbhip, rbthigh, rbleg, lfhip, lfthigh, lfleg, lbhip, lbthigh, lbleg;

static-var  restore_delay, animSpeed, maxSpeed, animFramesPerKeyframe, bMoving, oldhead, 
targetswap, isfiring, timer;

// Signal definitions
#define SIG_AIM				2
#define SIG_WALK			4


Walk() {//Created by https://github.com/Beherith/Skeletor_S3O from N:\animations\corcrash_anim_walk.blend 
	set-signal-mask SIG_WALK;
	if (bMoving) { //Frame:4 
			move lfleg to z-axis [-1.47] speed [43] / animSpeed; 
			move lfhip to z-axis [-1.80000] speed [54] / animSpeed; 
			move rbleg to z-axis [-1.47] speed [43] / animSpeed; 
			move rbhip to z-axis [-1.80000] speed [54] / animSpeed; 
			move rfleg to z-axis [1.8] speed [54] / animSpeed; 
			move rfhip to z-axis [2.03] speed [61] / animSpeed; 
			move lbleg to z-axis [1.8] speed [54] / animSpeed; 
			move lbhip to z-axis [2.03] speed [61] / animSpeed; 
			move lbhip to y-axis [0] speed [300] / animSpeed;	
		sleep ((33*animSpeed) -1);
	}
	while(bMoving) {
		if (bMoving) { //Frame:8
			move pelvis to y-axis [2] speed [60] / animSpeed;
			move lfleg to z-axis [0.000000] speed [43] / animSpeed; 
			move lfhip to z-axis [0.000000] speed [54] / animSpeed; 
			move rbleg to z-axis [0.000000] speed [43] / animSpeed; 
			move rbhip to z-axis [0.000000] speed [54] / animSpeed; 
			move rfleg to z-axis [0.000000] speed [54] / animSpeed; 
			move rfhip to z-axis [0.000000] speed [61] / animSpeed; 
			move rfhip to y-axis [-2] speed [60] / animSpeed; 
			move lbleg to z-axis [0.000000] speed [54] / animSpeed; 
			move lbhip to z-axis [0.000000] speed [61] / animSpeed; 
			move lbhip to y-axis [-2] speed [60] / animSpeed; 
		sleep ((33*animSpeed) -1);
		}
		if (bMoving) { //Frame:12
			move pelvis to y-axis [0] speed [60] / animSpeed;
			move lfleg to z-axis [1.8] speed [54] / animSpeed; 
			move lfhip to z-axis [2.03] speed [61] / animSpeed;			
			move rbleg to z-axis [1.8] speed [54] / animSpeed; 
			move rbhip to z-axis [2.03] speed [61] / animSpeed; 
			move rfleg to z-axis [-1.47] speed [43] / animSpeed; 
			move rfhip to z-axis [-1.8] speed [54] / animSpeed;  
			move rfhip to y-axis [0] speed [60] / animSpeed; 
			move lbleg to z-axis [-1.47] speed [43] / animSpeed; 
			move lbhip to z-axis [-1.8] speed [54] / animSpeed;  
			move lbhip to y-axis [0] speed [60] / animSpeed; 
		sleep ((33*animSpeed) -1);
		}
		if (bMoving) {
			move pelvis to y-axis [2] speed [60] / animSpeed;
			move lfleg to z-axis [0.000000] speed [54] / animSpeed; 
			move lfhip to z-axis [0.000000] speed [61] / animSpeed; 
			move lfhip to y-axis [-2] speed [60] / animSpeed; 
			move rbleg to z-axis [0.000000] speed [54] / animSpeed; 
			move rbhip to z-axis [0.000000] speed [61] / animSpeed; 
			move rbhip to y-axis [-2] speed [60] / animSpeed; 
			move rfleg to z-axis [0.000000] speed [43] / animSpeed; 
			move rfhip to z-axis [0.000000] speed [54] / animSpeed; 
			move lbleg to z-axis [0.000000] speed [43] / animSpeed; 
			move lbhip to z-axis [0.000000] speed [54] / animSpeed; 
		sleep ((33*animSpeed) -1);
		}
		if (bMoving) { //Frame:20
			move pelvis to y-axis [0] speed [60] / animSpeed;
			move lfleg to z-axis [-1.47] speed [43] / animSpeed; 
			move lfhip to z-axis [-1.8] speed [54] / animSpeed; 
			move lfhip to y-axis [0] speed [60] / animSpeed; 
			move rbleg to z-axis [-1.47] speed [43] / animSpeed; 
			move rbhip to z-axis [-1.8] speed [54] / animSpeed; 
			move rbhip to y-axis [0] speed [60] / animSpeed; 
			move rfleg to z-axis [1.8] speed [54] / animSpeed; 
			move rfhip to z-axis [2.03] speed [61] / animSpeed; 
			move lbleg to z-axis [1.8] speed [54] / animSpeed; 
			move lbhip to z-axis [2.03] speed [61] / animSpeed; 
		sleep ((33*animSpeed) -1);
		}
	}
}
// Call this from MotionControl()!
StopWalking() {
	move pelvis to y-axis [0.000000] speed [20.250000];
	move lfleg to z-axis [0.000000] speed [20.250000];
	move lfhip to z-axis [0.000000] speed [30.481575];
	move lbleg to z-axis [0.000000] speed [20.250000];
	move lbhip to z-axis [0.000000] speed [30.481575];
	move rfleg to z-axis [0.000000] speed [20.250000];
	move rfhip to z-axis [0.000000] speed [30.481575];
	move rbleg to z-axis [0.000000] speed [20.250000];
	move rbhip to z-axis [0.000000] speed [30.481575];
	move lbhip to y-axis [0] speed [300] / animSpeed;
	move lfhip to y-axis [0] speed [300] / animSpeed;
	move rbhip to y-axis [0] speed [300] / animSpeed;
	move rfhip to y-axis [0] speed [300] / animSpeed;
}

UnitSpeed(){
 maxSpeed = get MAX_SPEED; // this returns cob units per frame i think
 animFramesPerKeyframe = 4; //we need to calc the frames per keyframe value, from the known animtime
 maxSpeed = maxSpeed + (maxSpeed /(2*animFramesPerKeyframe)); // add fudge
 while(TRUE){
  animSpeed = (get CURRENT_SPEED);
  if (animSpeed<1) animSpeed=1;
  animSpeed = (maxSpeed * 15) / animSpeed; 
  //get PRINT(maxSpeed, animFramesPerKeyframe, animSpeed);
  if (animSpeed<4) animSpeed=4;
  if (animspeed>32) animSpeed = 32;
  sleep 131;
 }
}



#define BASEPIECE pelvis
#define HITSPEED <65.0>
//how 'heavy' the unit is, on a scale of 1-10
#define UNITSIZE 1
#define MAXTILT 100

StartMoving()
{
	signal SIG_WALK;
	set-signal-mask SIG_WALK;
	bMoving = TRUE;
	start-script UnitSpeed();
	start-script walk();
}

StopMoving()
{
	bMoving = FALSE;
	signal SIG_WALK;
	call-script StopWalking();
}

static-var  Stunned;
ExecuteRestoreAfterDelay()
{
    signal SIG_AIM;
    isfiring = 0;
	oldhead = -1000000;
	if (Stunned) {
        return (1);
    }
	turn aimy1 to y-axis <0.000000> speed <20.000000>;
	turn barrel to x-axis <0.000000> speed <20.000000>;
	timer = 0;
	targetswap = 0;
}

RestoreAfterDelay()
{
	set-signal-mask SIG_AIM;
	sleep restore_delay;
	start-script ExecuteRestoreAfterDelay();
}

SweepFire()
{
	while( TRUE )
	{
		if (targetswap == 1 AND isfiring == 1)
		{
			emit-sfx 2048 from flare;
			timer = timer + 1;
		}
		if (timer > 150)
		{
			//signal SIG_AIM;
			//timer = 0;
			start-script ExecuteRestoreAfterDelay();
		}
		sleep 20;
	}
}

Create()
{
	oldhead = -1000000;
	targetswap = 0; 	
	isfiring = 0;
	timer = 0;
	hide flare;
	hide aimy1;
	restore_delay = 1000;
	bMoving = FALSE;
	animSpeed = 20;
	start-script SweepFire();
	start-script StopMoving();
}

SetMaxReloadTime(Func_Var_1)
{
	restore_delay = 1000;
}

SweetSpot(piecenum)
{
	piecenum = pelvis;
}

AimFromPrimary(piecenum)
{
	piecenum = aimy1;
}

QueryPrimary(piecenum)
{
	piecenum = flare;
}

SetStunned(State)
{
    Stunned = State;
	if (!Stunned) {
	    //start-script ExecuteRestoreAfterDelay();
	}
}

AimPrimary(heading, pitch)
{
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	turn aimy1 to y-axis heading speed <25>;
	turn barrel to x-axis -1*pitch speed <5>;
	if (get ABS(oldhead - heading) > 500)
	{
		targetswap = 1;
	}
	if (get ABS(oldhead - heading) < 500)
	{
		oldhead = heading;
		isfiring = 1;
		start-script RestoreAfterDelay();
		return (1);
	}
	wait-for-turn aimy1 around y-axis;
	wait-for-turn barrel around x-axis;
	start-script RestoreAfterDelay();
	isfiring = 1;
	oldhead = heading;
	return (1);
}

FirePrimary()
{
	start-script RestoreAfterDelay();
	targetswap = 0;
	timer = timer + 1;
	return (0);
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1 ;
		explode pelvis type BITMAPONLY | NOHEATCLOUD;
		explode barrel type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode flare type BITMAPONLY | NOHEATCLOUD;
		return(corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2 ;
		explode pelvis type BITMAPONLY | NOHEATCLOUD;
		explode barrel type FALL | NOHEATCLOUD;
		explode flare type FALL | NOHEATCLOUD;
		return(corpsetype);
	}
	if( severity <= 99 )
	{
		corpsetype = 3 ;
		explode pelvis type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode barrel type EXPLODE_ON_HIT | SMOKE | FALL | NOHEATCLOUD;
		explode flare type EXPLODE_ON_HIT | SMOKE | FALL | NOHEATCLOUD;
		return(corpsetype);
	}
	corpsetype = 3 ;
		explode pelvis type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode barrel type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		explode flare type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
	return corpsetype;
}
