#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

#define SIG_BUILD	4

piece base, mlwheel, mrwheel, blwheel, brwheel, flwheel, frwheel, arml, armr, lpanel, rpanel, solar, loturret, upturret, nano, beam, cagelight, cagelight_emit;

static-var  restore_delay, statechg_DesiredState, statechg_StateChanging, notBuilding, currentSpeed, moveSpeed, wheelSpeed;


activatescr()
{
	turn arml to z-axis <30> speed <180>;
	turn armr to z-axis <-30> speed <180>;
	turn lpanel to z-axis <-20> speed <120>;
	turn rpanel to z-axis <20> speed <120>;
	turn solar to x-axis <-25> speed <50>;
	sleep 600;

	move nano to z-axis [3] speed [12];
	move cagelight to y-axis [2] speed [12];
	move loturret to y-axis [4] speed [12];
	move upturret to y-axis [5] speed [12];
	sleep 200;
}

deactivatescr()
{
	set INBUILDSTANCE to 0;
	hide cagelight_emit;
	turn cagelight to y-axis <0> speed <1000>;
	turn loturret to y-axis <0.000000> speed <160.038462>;
	turn upturret to y-axis <0.000000> speed <160.038462>;
	wait-for-turn loturret around y-axis;

	move loturret to y-axis [0] speed [12];
	move upturret to y-axis [0] speed [12];
	move nano to z-axis [0] speed [12];
	move cagelight to y-axis [0] speed [12];
	sleep 200;
	
	turn arml to z-axis <0> speed <180>;
	turn armr to z-axis <0> speed <180>;
	turn lpanel to z-axis <0> speed <120>;
	turn rpanel to z-axis <0> speed <120>;
	turn solar to x-axis <0> speed <50>;
	sleep 200;

}

WheelControl()
{
	while(TRUE)
	{
		currentSpeed = (get CURRENT_SPEED)*20/moveSpeed;
		wheelSpeed = currentSpeed * 20; //original speed 7
		if (currentSpeed<1) currentSpeed=1;	// prevent infinite timing			
		spin flwheel around x-axis speed  (<1> * wheelSpeed);
		spin frwheel around x-axis speed  (<1> * wheelSpeed);
		spin mlwheel around x-axis speed  (<1> * wheelSpeed);         
		spin mrwheel around x-axis speed  (<1> * wheelSpeed);			
		spin blwheel around x-axis speed  (<1> * wheelSpeed);			
		spin brwheel around x-axis speed  (<1> * wheelSpeed);			 
		sleep 98; //200
	}
}

#define BASEPIECE base
#define HITSPEED <55.0>
//how 'heavy' the unit is, on a scale of 1-10
#define UNITSIZE 3
#define MAXTILT 100

#include "unit_hitbyweaponid_and_smoke.h"

RequestState(requestedstate, currentstate)
{
	if( statechg_StateChanging )
	{
		statechg_DesiredState = requestedstate;
		return (0);
	}
	statechg_StateChanging = TRUE;
	currentstate = statechg_DesiredState;
	statechg_DesiredState = requestedstate;
	while( statechg_DesiredState != currentstate )
	{
		if( statechg_DesiredState )
		{
			call-script deactivatescr();
			notBuilding = 1;
			currentstate = 1;
		}
		else
		{
			call-script activatescr();
			notBuilding = 0;
			currentstate = 0;
		}
	}
	statechg_StateChanging = FALSE;
}

Create()
{
	hide beam;
	hide cagelight_emit;
	restore_delay = 3000;
	notBuilding = 1;
	moveSpeed = get MAX_SPEED;
	statechg_DesiredState = TRUE;
	statechg_StateChanging = FALSE;
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 500;
	}
	start-script WheelControl();
	
}

Activate()
{
	start-script RequestState(0);
}

Deactivate()
{
	start-script RequestState(1);
}

StartBuilding(heading, pitch)
{
	show beam;
	start-script RequestState(0);
	while( notBuilding ) sleep 100;
	signal SIG_BUILD;
	turn upturret to y-axis heading speed <160.038462>;
	wait-for-turn upturret around y-axis;
	set INBUILDSTANCE to 1;
	show cagelight_emit;
	spin cagelight around y-axis speed <250>;
}

StopBuilding()
{
	hide beam;
	signal SIG_BUILD;	
	set-signal-mask SIG_BUILD;
	hide cagelight_emit;
	turn cagelight to y-axis <0> speed <1000>;
	sleep 6000;
	set-signal-mask 0;
	signal SIG_BUILD;	
	start-script RequestState(1);
}

QueryNanoPiece(piecenum)
{
	piecenum = beam;

}


SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode solar type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode lpanel type BITMAPONLY | NOHEATCLOUD;
		explode rpanel type BITMAPONLY | NOHEATCLOUD;
		explode flwheel type BITMAPONLY | NOHEATCLOUD;
		return(corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode solar type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode lpanel type FALL | NOHEATCLOUD;
		explode rpanel type FALL | NOHEATCLOUD;
		explode flwheel type FIRE | SMOKE | FALL | NOHEATCLOUD;
		return(corpsetype);
	}
	if( severity <= 99 )
	{
		corpsetype = 3 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode solar type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode lpanel type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode rpanel type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode flwheel type FIRE | SMOKE | FALL | NOHEATCLOUD;
		return(corpsetype);
	}
	corpsetype = 3 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode solar type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode flwheel type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		explode lpanel type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		explode rpanel type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		explode flwheel type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
	return corpsetype;
}


