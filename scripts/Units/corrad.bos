//            * Header Info *
// VersionSignature                     4
// NumberOfScripts                     10
// NumberOfPieces                      2
// LengthOfScripts                     148
// NumberOfStaticVars                  2
// UKZero                              0
// OffsetToScriptCodeIndexArray        54c
// OffsetToScriptNameOffsetArray       574
// OffsetToPieceNameOffsetArray        59c
// OffsetToScriptCode                  2c
// OffsetToNameArray                   5a4

// OffsetToFirstName                   5a4

#define TA			// This is a TA script

static-var  statechg_DesiredState, statechg_StateChanging;
static-var  Stunned;

#include "sfxtype.h"
#include "exptype.h"

piece  base, dish, blink;


#define BASEPIECE base
#define HITSPEED <20.0>
//how 'heavy' the unit is, on a scale of 1-10
#define UNITSIZE 5
#define MAXTILT 100
HitByWeapon(anglex, anglez, damage)	// angle[x|z] is always [-500;500], damage is multiplied by 100
{
	var amount;//, speedz, speedx;
	amount = damage / (100 * UNITSIZE);
	if (amount < 3  ) return (0);
	if (amount > MAXTILT) amount = MAXTILT;
	//get PRINT(anglex, anglez, amount, damage);
	//speedz = HITSPEED * get ABS(anglez) / 500; //nevermind this, the random error this produces actually looks better than the accurate version
	turn BASEPIECE to z-axis (anglez * amount) / 100  speed HITSPEED;
	turn BASEPIECE to x-axis <0> - (anglex * amount) /100 speed HITSPEED;
	wait-for-turn BASEPIECE around z-axis;
	wait-for-turn BASEPIECE around x-axis;
	turn BASEPIECE to z-axis <0.000000> speed HITSPEED / 4;
	turn BASEPIECE to x-axis <0.000000> speed HITSPEED / 4;
}
HitByWeaponId(anglex, anglez, weaponid, dmg) //weaponID is always 0,lasers and flamers give angles of 0
{
	start-script HitByWeapon(dmg, anglez,anglex); //I dont know why param order must be switched, and this also runs a frame later :(
	return (100); //return damage percent
}

SmokeUnit(healthpercent, sleeptime, smoketype)
/*     3:*/{
/*     6:*/	while( get BUILD_PERCENT_LEFT )
/*     8:*/	{
/*     a:*/		sleep 400;
/*     d:*/	}
/*     f:*/	while( TRUE )
/*    11:*/	{
/*    14:*/		healthpercent = get HEALTH;
/*    1b:*/		if( healthpercent < 66 )
/*    1d:*/		{
/*    22:*/			smoketype = 256 | 2;
/*    2c:*/			if( Rand( 1, 66 ) < healthpercent )
/*    2e:*/			{
/*    33:*/				smoketype = 256 | 1;
/*    35:*/			}
/*    37:*/			emit-sfx smoketype from base;
/*    39:*/		}
/*    3e:*/		sleeptime = healthpercent * 50;
/*    45:*/		if( sleeptime < 200 )
/*    47:*/		{
/*    49:*/			sleeptime = 200;
/*    4b:*/		}
/*    4d:*/		sleep sleeptime;
/*    50:*/	}
/*    52:*/	return (0);
/*    53:*/}

Go()
/*    53:*/{
/*    57:*/	spin dish around y-axis speed <40.005495>;
/*    5c:*/	return (0);
/*    5d:*/}

Stop()
/*    5d:*/{
/*    5f:*/	stop-spin dish around y-axis;
/*    64:*/	return (0);
/*    65:*/}

InitState()
/*    65:*/{
/*    67:*/	statechg_DesiredState = TRUE;
/*    6b:*/	statechg_StateChanging = FALSE;
/*    6f:*/	return (0);
/*    70:*/}

RequestState(requestedstate, currentstate)
/*    72:*/{
/*    74:*/	if( statechg_StateChanging )
/*    76:*/	{
/*    78:*/		statechg_DesiredState = requestedstate;
/*    7c:*/		return (0);
/*    7d:*/	}
/*    7f:*/	statechg_StateChanging = TRUE;
/*    83:*/	currentstate = statechg_DesiredState;
/*    87:*/	statechg_DesiredState = requestedstate;
/*    8e:*/	while( statechg_DesiredState != currentstate )
/*    90:*/	{
/*    95:*/		if( statechg_DesiredState == 0 )
/*    97:*/		{
/*    97:*/			call-script Go();
/*    9c:*/			currentstate = 0;
/*    9e:*/		}
/*    a3:*/		if( statechg_DesiredState == 1 )
/*    a5:*/		{
/*    a5:*/			call-script Stop();
/*    aa:*/			currentstate = 1;
/*    ac:*/		}
/*    ae:*/	}
/*    b0:*/	statechg_StateChanging = FALSE;
/*    b4:*/	return (0);
/*    b5:*/}

SetStunned(State)
{
    Stunned = State;
	if (Stunned) {
	    call-script Stop();
	} else {
	    call-script Go();
	}
}

Create()
{
	call-script InitState();
	start-script SmokeUnit();
	return (0);
}

Lights()
{
	while( TRUE )
	{
	    if (!Stunned) {
		    emit-sfx 1024 + 0 from blink;
		}
		sleep 2500;
	}
	sleep 50;
	start-script Lights();
}

Activate()
{
	start-script Lights();
	start-script RequestState(0);
	return (0);
}

Deactivate()
{
	start-script RequestState(1);
	return (0);
}

SweetSpot(piecenum)
{
	piecenum = base;
	return (0);
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode dish type BITMAPONLY | NOHEATCLOUD;
		return(corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode dish type FIRE | SMOKE | FALL | NOHEATCLOUD;
		return(corpsetype);
	}
	if( severity <= 99 )
	{
		corpsetype = 3 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode dish type FIRE | SMOKE | FALL | NOHEATCLOUD;
		return(corpsetype);
	}
	corpsetype = 3 ;
		explode base type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode dish type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
	return corpsetype;
}
