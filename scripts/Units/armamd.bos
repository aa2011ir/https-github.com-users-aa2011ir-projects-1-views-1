//            * Header Info *
// VersionSignature                     4
// NumberOfScripts                     17
// NumberOfPieces                      9
// LengthOfScripts                     3ce
// NumberOfStaticVars                  5
// UKZero                              0
// OffsetToScriptCodeIndexArray        f64
// OffsetToScriptNameOffsetArray       fa8
// OffsetToPieceNameOffsetArray        fec
// OffsetToScriptCode                  2c
// OffsetToNameArray                   1010

// OffsetToFirstName                   1010

#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, flare, door1, door2, antenna, greenlight, orangelight, piston, y_hinge, z_rotor, head, barrel;

static-var  Static_Var_1, restore_delay, gun_1, statechg_DesiredState, statechg_StateChanging, missiles_stockpiled, lastpitch, lastheading, fireconfirms;

// Signal definitions
#define SIG_AIM				2


activatescr()
{
	if( TRUE )
	{
	    show barrel;
	    emit-sfx 257 from y_hinge; //Big opening smoke
		turn door1 to z-axis <0.000000> now;
		turn door1 to z-axis <45> speed <20.000000>;
		turn door2 to z-axis <0.000000> now;
		turn door2 to z-axis <-45> speed <20.000000>;
		sleep 2200;
		move piston to y-axis [0.000000] now;
        move piston to y-axis [6.500000] speed [2.16000];
        turn y_hinge to z-axis <0.000000> now;
		sleep 3000;
        turn y_hinge to z-axis <90> speed <45.000000>;
		sleep 2000;
	}

	sleep 2;
	return (0);
}

deactivatescr()
{
	if( TRUE )
	{
		//turn door1 to z-axis <-90> now;
		//turn door1 to z-axis <0.000000> speed <25.000000>;
		//turn door2 to z-axis <90> now;
		//turn door2 to z-axis <0.000000> speed <25.000000>;
		//move piston to y-axis [17.000000] now;
        //move piston to y-axis [0.000000] speed [6.000000];
        //sleep 170;
        //turn y_hinge to z-axis <90.000000> now;
        //turn y_hinge to z-axis <0> speed <12.000000>;
        //sleep 85;
        hide barrel;
	}

	sleep 14;
	return (0);
}


Go()
{
	call-script activatescr();
	Static_Var_1 = 1;
	return (0);
}

Stop()
{
	Static_Var_1 = 0;
	call-script deactivatescr();
	return (0);
}

InitState()
{
	statechg_DesiredState = TRUE;
	statechg_StateChanging = FALSE;
	return (0);
}

RequestState(requestedstate, currentstate)
{
	if( statechg_StateChanging )
	{
		statechg_DesiredState = requestedstate;
		return (0);
	}
	statechg_StateChanging = TRUE;
	currentstate = statechg_DesiredState;
	statechg_DesiredState = requestedstate;
	while( statechg_DesiredState != currentstate )
	{
		if( statechg_DesiredState == 0 )
		{
			call-script Go();
			currentstate = 0;
		}
		if( statechg_DesiredState == 1 )
		{
			call-script Stop();
			currentstate = 1;
		}
	}
	statechg_StateChanging = FALSE;
	return (0);
}

Create()
{
    emit-sfx 1024 + 1 from y_hinge;
    hide barrel;
	hide flare;
	Static_Var_1 = 0;
	gun_1 = flare;
	restore_delay = 3000;
	missiles_stockpiled = 0;
	hide greenlight;
	show orangelight;
	call-script InitState();

	lastpitch = 32000;
	lastheading = 0;
	fireconfirms = 0;
}

#define SMOKEPIECE base
#include "smokeunit_thread_nohit.h"

Activate()
{
	start-script RequestState(0);
	return (0);
}

Deactivate()
{
	start-script RequestState(1);
	return (0);
}

SetMaxReloadTime(Func_Var_1)
{
	restore_delay = Func_Var_1 * 2;
	return (0);
}

AimPrimary(heading, pitch)
{
    start-script RequestState(0);
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	while( !Static_Var_1 )
    {
        sleep 1;
    }

    heading = heading - 16384; //Offset

    //Make superquick turn if target is far
    turn z_rotor to x-axis <0.000000> - heading speed <500.000000>;
    turn head to z-axis <0.000000> - pitch speed <500.000000>;
    if ( (get ABS(lastheading - heading) < 3000) AND (get ABS(lastpitch - pitch) < 1500) )
    {
        lastheading = heading;
        lastpitch = pitch;
        return (1);
    }
    wait-for-turn z_rotor around x-axis;
    wait-for-turn head around z-axis;

    get PRINT(heading, pitch, (get ABS(lastheading) - get ABS(heading)));
    fireconfirms = 0;

    //Do not fire if target (nuke) is still ascending -> prevents unnecessary early explosion that just causes unwanted mess on enemy side.
	//if ( lastpitch <= pitch ) {
	//    fireconfirmed = 1;
	//}
	lastpitch = pitch;
	lastheading = heading;

	return (1);
}

FirePrimary()
{
    //gun_1 = flare;
	//return (0);
}

QueryPrimary(piecenum)
{
	piecenum = flare;
}

AimFromPrimary(piecenum)
{
	piecenum = flare;
}

SweetSpot(piecenum)
{
	piecenum = base;
}

lights_orange()
{
	hide greenlight;
	show orangelight;
}

lights_green()
{
	show greenlight;
	hide orangelight;
}

SetStockpile(num_stockpiled)
{
	if (num_stockpiled == 0)
	{
		start-script lights_orange();
		//sleep 100;
		missiles_stockpiled = 0;
	}
	if (num_stockpiled >= 1)
	{
		start-script lights_green();
		//sleep 100;
		missiles_stockpiled = 1;
	}
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		return (corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode flare type FALL | BITMAP1 | NOHEATCLOUD;
		return (corpsetype);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode flare type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1 | NOHEATCLOUD;
		return (corpsetype);
	}
	corpsetype = 3;
	explode flare type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1 | NOHEATCLOUD;
	return (corpsetype);
}
