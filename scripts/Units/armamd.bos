//            * Header Info *
// VersionSignature                     4
// NumberOfScripts                     17
// NumberOfPieces                      9
// LengthOfScripts                     3ce
// NumberOfStaticVars                  5
// UKZero                              0
// OffsetToScriptCodeIndexArray        f64
// OffsetToScriptNameOffsetArray       fa8
// OffsetToPieceNameOffsetArray        fec
// OffsetToScriptCode                  2c
// OffsetToNameArray                   1010

// OffsetToFirstName                   1010

#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, flare, door1, door2, antenna, greenlight, orangelight, piston, y_hinge, z_rotor, head, barrel, barrel_extend;

static-var  Static_Var_1, gun_1, statechg_DesiredState, statechg_StateChanging, lastpitch, lastheading, fireconfirms, deactivateCalls;

// Signal definitions
#define SIG_AIM				2

#define DEACTIVATE_IDLE 5 //How long it takes (In seconds) to shutdown antinuke when idle.
#define FIRE_CONFIRMS 3 //How much confirmations needed to actually fire a nuke missile (Safety feature to prevent shooting nukes that are still on ground/ascending)

activatescr()
{
	if( TRUE )
	{
	    emit-sfx 1024 + 0 from y_hinge; //Big opening smoke
        emit-sfx 4096 + 1 from y_hinge; //Play smoke1.wav sound

		turn door1 to z-axis <0.000000> now;
		turn door1 to z-axis <50> speed <16.70000>;
		turn door2 to z-axis <0.000000> now;
		turn door2 to z-axis <-50> speed <16.70000>;
		emit-sfx 4096 + 2 from y_hinge; //Play opening1.wav sound
		sleep 1700;

		move piston to y-axis [0.000000] now;
        move piston to y-axis [6.500000] speed [2.16000];
        emit-sfx 4096 + 3 from y_hinge; //Play piston1.wav sound
        turn y_hinge to z-axis <0.000000> now;

		show flare; //Blink 1
		sleep 500;
		hide flare;
		sleep 500;
		show flare; //Blink 2
		emit-sfx 4096 + 5 from y_hinge; //Play door1.wav sound
        sleep 500;
        hide flare;
        sleep 500;
        show flare; //Blink 3
        sleep 500;
        hide flare;
        sleep 500;
        show flare; //Turned ON

        turn y_hinge to z-axis <90> speed <90.000000>;
		sleep 1000;
		move barrel_extend to y-axis [7.6500] speed [22.9500];
		emit-sfx 4096 + 4 from y_hinge; //Play bladeextend1.wav sound
		sleep 333;
	}

	sleep 3;
	return (0);
}

deactivatescr()
{
    
	if( TRUE )
	{
	    turn z_rotor to x-axis <0.000000> speed <60.000000>;
        turn head to z-axis <0.000000> speed <60.000000>;
        wait-for-turn z_rotor around x-axis;
        wait-for-turn head around z-axis;
        sleep 300;
        hide flare;
        sleep 500;

        move barrel_extend to y-axis [0.0000] speed [22.9500];
        emit-sfx 4096 + 4 from y_hinge; //Play bladeextend1.wav sound
        sleep 333;

        turn y_hinge to z-axis <90.000000> now;
        turn y_hinge to z-axis <0> speed <60.000000>;
        sleep 1500;

        move piston to y-axis [6.500000] now;
        move piston to y-axis [0.000000] speed [2.16000];
        sleep 1300;

        turn door1 to z-axis <50.000000> now;
        turn door1 to z-axis <0> speed <16.70000>;
        turn door2 to z-axis <-50.000000> now;
        turn door2 to z-axis <0> speed <16.70000>;
        emit-sfx 4096 + 2 from y_hinge; //Play opening1.wav sound
        wait-for-turn door1 around z-axis;
        wait-for-turn door2 around z-axis;
        emit-sfx 4096 + 5 from y_hinge; //Play door1.wav sound
	}

	sleep 14;
	return (0);
}


Go()
{
	call-script activatescr();
	Static_Var_1 = 1;
	return (0);
}

Stop()
{
	Static_Var_1 = 0;
	call-script deactivatescr();
	return (0);
}

InitState()
{
	statechg_DesiredState = TRUE;
	statechg_StateChanging = FALSE;
	return (0);
}

RequestState(requestedstate, currentstate)
{
	if( statechg_StateChanging )
	{
		statechg_DesiredState = requestedstate;
		return (0);
	}
	statechg_StateChanging = TRUE;
	currentstate = statechg_DesiredState;
	statechg_DesiredState = requestedstate;
	while( statechg_DesiredState != currentstate )
	{
		if( statechg_DesiredState == 0 )
		{
			call-script Go();
			currentstate = 0;
		}
		if( statechg_DesiredState == 1 )
		{
			call-script Stop();
			currentstate = 1;
		}
	}
	statechg_StateChanging = FALSE;
	return (0);
}

Create()
{
	hide flare;
	Static_Var_1 = 0;
	gun_1 = flare;
	hide greenlight;
	show orangelight;
	call-script InitState();

	lastpitch = 32000;
	lastheading = 0;
	fireconfirms = 0;
}

#define SMOKEPIECE base
#include "smokeunit_thread_nohit.h"

Activate()
{
	start-script RequestState(0);
	return (0);
}

Deactivate()
{
	start-script RequestState(1);
	return (0);
}

AimPrimary(heading, pitch)
{
    start-script RequestState(0);
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	while( !Static_Var_1 )
    {
        sleep 150;
    }

    heading = heading - 16384; //Offset

    //Make superquick turn if target is far
    if (get ABS(lastheading) - get ABS(heading) > 12000) {
        turn z_rotor to x-axis <0.000000> - heading speed <400.000000>;
        turn head to z-axis <0.000000> - pitch speed <400.000000>;
        wait-for-turn z_rotor around x-axis;
        wait-for-turn head around z-axis;
    } else {
        turn z_rotor to x-axis <0.000000> - heading speed <60.000000>;
        turn head to z-axis <0.000000> - pitch speed <60.000000>;
        wait-for-turn z_rotor around x-axis;
        wait-for-turn head around z-axis;
    }

    fireconfirms = 0;

    //Do not fire if target (nuke) is still ascending -> prevents unnecessary early explosion that just causes unwanted mess on enemy side.
	//if ( lastpitch <= pitch ) {
	//    fireconfirmed = 1;
	//}
	lastpitch = pitch;
	lastheading = heading;

	return (1);
}

FirePrimary()
{
    gun_1 = flare;
    sleep 5000;
    call-script Deactivate();
}

QueryPrimary(piecenum)
{
	piecenum = flare;
}

AimFromPrimary(piecenum)
{
	piecenum = flare;
}

SweetSpot(piecenum)
{
	piecenum = base;
}

lights_orange()
{
	hide greenlight;
	show orangelight;
}

lights_green()
{
	show greenlight;
	hide orangelight;
}

SetStockpile(num_stockpiled)
{
	if (num_stockpiled == 0)
	{
		start-script lights_orange();
		sleep 100;
	}
	if (num_stockpiled >= 1)
	{
		start-script lights_green();
		sleep 100;
	}
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		return (corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode flare type FALL | BITMAP1 | NOHEATCLOUD;
		return (corpsetype);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode flare type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1 | NOHEATCLOUD;
		return (corpsetype);
	}
	corpsetype = 3;
	explode flare type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1 | NOHEATCLOUD;
	return (corpsetype);
}
