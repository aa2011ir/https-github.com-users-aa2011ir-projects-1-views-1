#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece base, door1, door2,                                         //Outter structure
      greenlight, orangelight,                                    //Stockpile lights
      piston, y_hinge, z_rotor, head, barrel, barrel_extend,      //Weapon
      flare, smoke, laser;                                        //Invisible points

static-var state, statechg_DesiredState, statechg_StateChanging,   //Unit state
            lastpitch, lastheading,                                 //Weapon rotation
            fireconfirms, deactivateCalls;                          //Special functions

// Signal definitions
#define SIG_AIM				2

#define STATE_OFF           0
#define STATE_ON            1
#define STATE_ACTIVATING    2
#define STATE_DEACTIVATING  3

#define DEACTIVATE_IDLE 5   //How long it takes (In seconds) to shutdown ( Deactivate() ) antinuke when idle.
#define FIRE_CONFIRMS 3     //How much confirmations needed to actually fire a nuke missile (Safety feature to prevent shooting nukes that are still on ground/ascending)

activatescr()
{
    state = STATE_ACTIVATING;

    emit-sfx 1024 + 0 from smoke; //Big opening smoke
    emit-sfx 4096 + 1 from smoke; //Play smoke1.wav sound

    turn door1 to z-axis <50> speed <16.70000>;
    turn door2 to z-axis <-50> speed <16.70000>;
    emit-sfx 4096 + 2 from smoke; //Play opening1.wav sound
    sleep 1000;

    move piston to y-axis [6.500000] speed [3.25000];
    emit-sfx 4096 + 3 from smoke; //Play piston1.wav sound
    turn y_hinge to z-axis <0.000000> now;

    show laser; //Blink 1
    sleep 500;
    hide laser;
    sleep 500;
    show laser; //Blink 2
    emit-sfx 4096 + 5 from smoke; //Play door1.wav sound
    sleep 500;
    hide laser;
    sleep 500;

    turn y_hinge to z-axis <90> speed <135.000000>;
    sleep 500;
    move barrel_extend to y-axis [7.6500] speed [22.9500];
    emit-sfx 4096 + 4 from smoke; //Play bladeextend1.wav sound
    sleep 333;
    show laser; //Turned ON

    state = STATE_ON;
	return (0);
}

deactivatescr()
{
    state = STATE_DEACTIVATING;

    turn z_rotor to x-axis <0.000000> speed <60.000000>;
    turn head to z-axis <0.000000> speed <60.000000>;
    wait-for-turn z_rotor around x-axis;
    wait-for-turn head around z-axis;
    sleep 300;
    hide laser;
    sleep 500;

    move barrel_extend to y-axis [0.0000] speed [22.9500];
    emit-sfx 4096 + 4 from smoke; //Play bladeextend1.wav sound
    sleep 333;

    turn y_hinge to z-axis <0> speed <60.000000>;
    sleep 1500;

    move piston to y-axis [0.000000] speed [2.16000];
    sleep 1300;

    turn door1 to z-axis <0> speed <16.70000>;
    turn door2 to z-axis <0> speed <16.70000>;
    emit-sfx 4096 + 2 from smoke; //Play opening1.wav sound
    wait-for-turn door1 around z-axis;
    wait-for-turn door2 around z-axis;
    emit-sfx 4096 + 5 from smoke; //Play door1.wav sound

    state = STATE_OFF;

	return (0);
}


Go()
{
	call-script activatescr();
	return (0);
}

Stop()
{
	call-script deactivatescr();
	return (0);
}

RequestState(requestedstate, currentstate)
{
	if( statechg_StateChanging )
	{
		statechg_DesiredState = requestedstate;
		return (0);
	}
	statechg_StateChanging = TRUE;
	currentstate = statechg_DesiredState;
	statechg_DesiredState = requestedstate;
	while( statechg_DesiredState != currentstate )
	{
		if( statechg_DesiredState == STATE_ON )
		{
			call-script Go();
			currentstate = STATE_ON;
			while (deactivateCalls <= DEACTIVATE_IDLE) {
                sleep 1000;
                if (state == STATE_ON)
                    deactivateCalls = deactivateCalls + 1;
            }
            start-script RequestState(STATE_OFF);
		}
		if( statechg_DesiredState == STATE_OFF )
		{
			call-script Stop();
			currentstate = STATE_OFF;
		}
	}
	statechg_StateChanging = FALSE;
	return (0);
}

Create()
{
	hide laser;
	hide greenlight;
	show orangelight;

	state = STATE_OFF;
	statechg_DesiredState = TRUE;
    statechg_StateChanging = FALSE;

	lastpitch = 32000;
	lastheading = 0;
	fireconfirms = 0;
}

#define SMOKEPIECE base
#include "smokeunit_thread_nohit.h"

Activate()
{
	start-script RequestState(STATE_ON);
	return (0);
}

Deactivate()
{
	//start-script RequestState(STATE_OFF);
	return (0);
}

AimPrimary(heading, pitch)
{
    deactivateCalls = 0;
    start-script RequestState(0);
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	while( state != STATE_ON )
    {
        sleep 150;
    }

    heading = heading - 16384; //Offset

    //Make superquick turn if target is far
    if (get ABS(lastheading) - get ABS(heading) > 12000) {
        turn z_rotor to x-axis <0.000000> - heading speed <400.000000>;
        turn head to z-axis <0.000000> - pitch speed <400.000000>;
        wait-for-turn z_rotor around x-axis;
        wait-for-turn head around z-axis;
    } else {
        turn z_rotor to x-axis <0.000000> - heading speed <60.000000>;
        turn head to z-axis <0.000000> - pitch speed <60.000000>;
        wait-for-turn z_rotor around x-axis;
        wait-for-turn head around z-axis;
    }

    //Do not fire if target (nuke) is still ascending -> prevents unnecessary early explosion that just causes unwanted mess on enemy side.
	if ( lastpitch >= pitch ) {
	    fireconfirms = fireconfirms + 1;
	} else {
	    fireconfirms = 0;
	}

	lastpitch = pitch;
	lastheading = heading;

	return (fireconfirms >= FIRE_CONFIRMS);
}

FirePrimary()
{
    fireconfirms = 0;
    call-script Deactivate();
}

QueryPrimary(piecenum)
{
	piecenum = flare;
}

AimFromPrimary(piecenum)
{
	piecenum = flare;
}

SweetSpot(piecenum)
{
	piecenum = base;
}

SetStockpile(num_stockpiled)
{
	if (num_stockpiled == 0)
	{
		hide greenlight;
        show orangelight;

		sleep 100;
	}
	if (num_stockpiled >= 1)
	{
		show greenlight;
        hide orangelight;

		sleep 100;
	}
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		return (corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode flare type FALL | BITMAP1 | NOHEATCLOUD;
		return (corpsetype);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode flare type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1 | NOHEATCLOUD;
		return (corpsetype);
	}
	corpsetype = 3;
	explode flare type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1 | NOHEATCLOUD;
	return (corpsetype);
}
