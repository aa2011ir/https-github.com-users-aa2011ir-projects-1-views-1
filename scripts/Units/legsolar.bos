#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, skirt, corecont,
	  Acore, A, Ar, Ar1, Ar2, A1, A2, AL, AL1, AL2,
	  Bcore, B, Br, Br1, Br2, B1, B2, BL, BL1, BL2,
	  Ccore, C, Cr, Cr1, Cr2, C1, C2, CL, CL1, CL2,
	  Dcore, D, Dr, Dr1, Dr2, D1, D2, DL, DL1, DL2,
	  Ecore, E, Er, Er1, Er2, E1, E2, EL, EL1, EL2,
	  Fcore, F, Fr, Fr1, Fr2, F1, F2, FL, FL1, FL2;//fuck me

static-var  Static_Var_1, statechg_DesiredState, statechg_StateChanging;


SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 500;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = SFXTYPE_BLACKSMOKE;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = SFXTYPE_WHITESMOKE;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}


Go()
{
	if( Static_Var_1 )
	{
		set ACTIVATION to 0;
		return (0);
	}
	turn A to z-axis <140> speed <80.000000>;
	turn B to z-axis <140> speed <80.000000>;
	turn C to z-axis <140> speed <80.000000>;
	turn D to z-axis <140> speed <80.000000>;
	turn E to z-axis <140> speed <80.000000>;
	turn F to z-axis <140> speed <80.000000>;
	wait-for-turn A around z-axis;
	
	
	turn AL1 to y-axis <-45> speed <120.000000>;
	turn AL2 to y-axis <-45> speed <120.000000>;
	turn BL1 to y-axis <-45> speed <120.000000>;
	turn BL2 to y-axis <-45> speed <120.000000>;
	turn CL1 to y-axis <-45> speed <120.000000>;
	turn CL2 to y-axis <-45> speed <120.000000>;
	turn DL1 to y-axis <-45> speed <120.000000>;
	turn DL2 to y-axis <-45> speed <120.000000>;
	turn EL1 to y-axis <-45> speed <120.000000>;
	turn EL2 to y-axis <-45> speed <120.000000>;
	turn FL1 to y-axis <-45> speed <120.000000>;
	turn FL2 to y-axis <-45> speed <120.000000>;

	wait-for-turn BL1 around y-axis;

	turn AR1 to y-axis <45> speed <120.000000>;
	turn AR2 to y-axis <45> speed <120.000000>;
	turn BR1 to y-axis <45> speed <120.000000>;
	turn BR2 to y-axis <45> speed <120.000000>;
	turn CR1 to y-axis <45> speed <120.000000>;
	turn CR2 to y-axis <45> speed <120.000000>;
	turn DR1 to y-axis <45> speed <120.000000>;
	turn DR2 to y-axis <45> speed <120.000000>;
	turn ER1 to y-axis <45> speed <120.000000>;
	turn ER2 to y-axis <45> speed <120.000000>;
	turn FR1 to y-axis <45> speed <120.000000>;
	turn FR2 to y-axis <45> speed <120.000000>;

	turn AL1 to z-axis <0> speed <180.000000>;
	turn AL2 to z-axis <0> speed <180.000000>;
	turn BL1 to z-axis <0> speed <180.000000>;
	turn BL2 to z-axis <0> speed <180.000000>;
	turn CL1 to z-axis <0> speed <180.000000>;
	turn CL2 to z-axis <0> speed <180.000000>;
	turn DL1 to z-axis <0> speed <180.000000>;
	turn DL2 to z-axis <0> speed <180.000000>;
	turn EL1 to z-axis <0> speed <180.000000>;
	turn EL2 to z-axis <0> speed <180.000000>;
	turn FL1 to z-axis <0> speed <180.000000>;
	turn FL2 to z-axis <0> speed <180.000000>;

	wait-for-turn AR1 around y-axis;


	//show emit;
	set ARMORED to 0;
	set YARD_OPEN to 0;
}

Stop()
{
	
	
	//turn AL1 to z-axis <3> speed <180.000000>;
	////turn AL2 to z-axis <3> speed <180.000000>;
	//turn BL1 to z-axis <3> speed <180.000000>;
	//turn BL2 to z-axis <3> speed <180.000000>;
	
	turn AL1 to y-axis <-179> speed <180.000000>;
	turn AL2 to y-axis <-179> speed <180.000000>;
	turn AR1 to y-axis <179> speed <100.000000>;
	turn AR2 to y-axis <179> speed <100.000000>;

	turn BL1 to y-axis <-179> speed <180.000000>;
	turn BL2 to y-axis <-179> speed <180.000000>;
	turn BR1 to y-axis <179> speed <100.000000>;
	turn BR2 to y-axis <179> speed <100.000000>;
	
	turn CL1 to y-axis <-179> speed <180.000000>;
	turn CL2 to y-axis <-179> speed <180.000000>;
	turn CR1 to y-axis <179> speed <100.000000>;
	turn CR2 to y-axis <179> speed <100.000000>;

	turn DL1 to y-axis <-179> speed <180.000000>;
	turn DL2 to y-axis <-179> speed <180.000000>;
	turn DR1 to y-axis <179> speed <100.000000>;
	turn DR2 to y-axis <179> speed <100.000000>;
	
	turn EL1 to y-axis <-179> speed <180.000000>;
	turn EL2 to y-axis <-179> speed <180.000000>;
	turn ER1 to y-axis <179> speed <100.000000>;
	turn ER2 to y-axis <179> speed <100.000000>;

	turn FL1 to y-axis <-179> speed <180.000000>;
	turn FL2 to y-axis <-179> speed <180.000000>;
	turn FR1 to y-axis <179> speed <100.000000>;
	turn FR2 to y-axis <179> speed <100.000000>;
	
	//move BL1 to x-axis [0.25] speed [20];
	//move BL2 to x-axis [0.5] speed [20];
	//move AL1 to x-axis [0.25] speed [20];
	//move AL2 to x-axis [0.5] speed [20];

	

	

	//move Acore to y-axis [1] speed [100];
	//move Bcore to y-axis [1] speed [100];
	//move Ccore to y-axis [1] speed [100];
	//move Dcore to y-axis [1] speed [100];
	//move Ecore to y-axis [1] speed [100];
	//move Fcore to y-axis [1] speed [100];
	
	
	
	turn A to z-axis <-39.000000> speed <100.000000>;
	turn B to z-axis <-39.000000> speed <100.000000>;
	turn C to z-axis <-39.000000> speed <100.000000>;
	turn D to z-axis <-39.000000> speed <100.000000>;
	turn E to z-axis <-39.000000> speed <100.000000>;
	turn F to z-axis <-39.000000> speed <100.000000>;


	wait-for-turn AR1 around y-axis;

	wait-for-turn A around z-axis;
	
	//hide emit;
	set ARMORED to 1;
	set YARD_OPEN to 1;
}

RequestState(requestedstate, currentstate)
{
	if( statechg_StateChanging )
	{
		statechg_DesiredState = requestedstate;
		return (0);
	}
	statechg_StateChanging = TRUE;
	currentstate = statechg_DesiredState;
	statechg_DesiredState = requestedstate;
	while( statechg_DesiredState != currentstate )
	{
		if( statechg_DesiredState )
		{
			call-script Stop();
			currentstate = 1;
		}
		else
		{
			call-script Go();
			currentstate = 0;
		}
	}
	statechg_StateChanging = FALSE;
}

Create()
{	
	//unhack
	hide skirt;
	move corecont to y-axis [26] now;
	turn Bcore to y-axis <60> now;
	turn Ccore to y-axis <120> now;
	turn Dcore to y-axis <180> now;
	turn Ecore to y-axis <240> now;
	turn Fcore to y-axis <300> now;
	
	
	//turn Ar to z-axis <-2> speed <600.000000>;
	//turn Br to z-axis <-2> speed <600.000000>;
	
	turn Fr to x-axis <20.5> now;
	turn Fl to x-axis <-20.5> now;
	turn Er to x-axis <20.5> now;
	turn El to x-axis <-20.5> now;
	turn Dr to x-axis <20.5> now;
	turn Dl to x-axis <-20.5> now;
	turn Cr to x-axis <20.5> now;
	turn Cl to x-axis <-20.5> now;
	turn Br to x-axis <20.5> now;
	turn Bl to x-axis <-20.5> now;
	turn Ar to x-axis <20.5> now;
	turn Al to x-axis <-20.5> now;
	
	
	
	turn AL1 to y-axis <-179> now;
	turn AL2 to y-axis <-179> now;
	turn AR1 to y-axis <179> now;
	turn AR2 to y-axis <179> now;

	turn BL1 to y-axis <-179> now;
	turn BL2 to y-axis <-179> now;
	turn BR1 to y-axis <179> now;
	turn BR2 to y-axis <179> now;
	
	turn CL1 to y-axis <-179> now;
	turn CL2 to y-axis <-179> now;
	turn CR1 to y-axis <179> now;
	turn CR2 to y-axis <179> now;

	turn DL1 to y-axis <-179> now;
	turn DL2 to y-axis <-179> now;
	turn DR1 to y-axis <179> now;
	turn DR2 to y-axis <179> now;
	
	turn EL1 to y-axis <-179> now;
	turn EL2 to y-axis <-179> now;
	turn ER1 to y-axis <179> now;
	turn ER2 to y-axis <179> now;

	turn FL1 to y-axis <-179> now;
	turn FL2 to y-axis <-179> now;
	turn FR1 to y-axis <179> now;
	turn FR2 to y-axis <179> now;
	
	
	
	statechg_DesiredState = TRUE;
	statechg_StateChanging = FALSE;
	start-script SmokeUnit();
	Static_Var_1 = 0;
}

Activate()
{
	if( Static_Var_1 )
	{
		set ACTIVATION to 0;
		return (0);
	}
	start-script RequestState(0);
}

Deactivate()
{
	start-script RequestState(1);
}

HitByWeapon(anglex, anglez)
{
	if( get ACTIVATION )
	{
		Static_Var_1 = 1;
	}
	if( Static_Var_1 )
	{
		signal 2;
		set-signal-mask 2;
		set ACTIVATION to 0;
		sleep 8000;
		Static_Var_1 = 0;
		set ACTIVATION to 100;
	}
}

SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode A type BITMAPONLY | NOHEATCLOUD;
		explode A type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode Ar type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode Al type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode B type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode Br type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode Bl type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		return(corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode A type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode B type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode C type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode D type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode E type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode F type FIRE | SMOKE | FALL | NOHEATCLOUD;
		return(corpsetype);
	}
	if( severity <= 99 )
	{
		corpsetype = 3 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode A type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode Ar type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode Al type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode B type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode Br type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode Bl type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		return(corpsetype);
	}
	corpsetype = 3 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode A type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode Ar type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode Al type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode B type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode Br type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode Bl type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
	return corpsetype;
}
