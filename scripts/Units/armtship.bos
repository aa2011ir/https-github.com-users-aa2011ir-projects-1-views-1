#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, turret, arm1, arm2, arm3, link, door1, door2, door3, magnet, arm4, arm5, arm6, arm7, ground, wake;

static-var  Static_Var_1, TurretToUnitDistance, TurretToUnitAngleY, TurretToUnitAngleX, bInDistance,maxDistance,pickUpSpeed,dropOffSpeed,turretSpeed,boomToPadSpeed,boomResetSpeed,newAngle;

// Signal definitions
#define SIG_MOVE			2


#define BASEPIECE base
#define HITSPEED <25.0>
//how 'heavy' the unit is, on a scale of 1-10
#define UNITSIZE 7
#define MAXTILT 100

#include "unit_hitbyweaponid_and_smoke.h"



FocusPickUp(unitid){
		move link to y-axis 0 now;

		move link to x-axis 0 now;

		move link to z-axis 0 now;
//	var	link_z;link_z = ( get PIECE_XZ(link) & 0x0000ffff); // silly unpack
//	var	link_x;link_x = ( get PIECE_XZ(link) & 0xffff0000) / 0x00010000; // yes this works

//	var	unit_z;unit_z = ( get UNIT_XZ(unitid) & 0x0000ffff); // silly unpack
//	var	unit_x;unit_x = ( get UNIT_XZ(unitid) & 0xffff0000) / 0x00010000; // yes this works
if(get UNIT_HEIGHT(unitid)>1700000){
		move link to z-axis   get UNIT_HEIGHT(unitid) now;
//
		move link to y-axis 0-  get UNIT_HEIGHT(unitid)*2.5 now;

	wait-for-turn link around y-axis;	


}else{
		move link to y-axis 0-  get UNIT_HEIGHT(unitid) now;

}

		attach-unit unitid to link;


}


FocusDropOff(unitid,position){

//while the stupid link does not match the x/y of the unit, move the boom appropriately.
var yDiff;
yDiff=get UNIT_Y(unitid)- get GROUND_HEIGHT(position);


if(get UNIT_HEIGHT(unitid)>1700000){

		move link to y-axis 0-  get UNIT_HEIGHT(unitid)+yDiff speed [25.000000];
		wait-for-move link along y-axis;

		
}else{
		move link to y-axis 0-  get UNIT_HEIGHT(unitid)+yDiff speed [25.000000];
		wait-for-move link along y-axis;

}


}

RockOnWaves()
{
	var rockDir, rockAng, rockSpeed;
	rockDir = <-0.1>;
	rockAng = <-0.1>;
	while( TRUE )
	{
		while( get ABS(rockAng) < <1.31> )
		{
			rockSpeed = <1.45> - get ABS(rockAng);
			turn ground to x-axis rockAng speed rockSpeed*3;
			wait-for-turn ground around x-axis;
			rockAng = rockAng + rockDir;
		}
		rockDir = 0 - rockDir;
		rockAng = rockAng + rockDir + rockDir;
	}
}


Create()
{
	maxDistance= [70.000000];
	pickUpSpeed=  <200.000000>;
	dropOffSpeed=  <250.000000>;
	turretSpeed= <200.000000>;
	boomToPadSpeed= [12.000000];
	boomResetSpeed= [120.000000];

	hide wake;
	//hide link;
	hide ground;
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 500;
	}
	start-script RockOnWaves();
}

waveSplash()
{
	while( TRUE )
	{
		turn base to x-axis <-3.0> speed <3.0>;
		move base to y-axis [0.35] speed [0.25];
		wait-for-turn base around x-axis;
		turn base to x-axis <0.0> speed <3.0>;
		move base to y-axis [0.0] speed [0.25];
		wait-for-turn base around x-axis;
	}
}

StartMoving()
{
	signal SIG_MOVE;
	set-signal-mask SIG_MOVE;
	var waketime;
	start-script waveSplash();
	while( TRUE )
	{
		emit-sfx 1024 + 1 from wake;
		waketime = (get CURRENT_SPEED) * 100 / get MAX_SPEED;
		if( waketime < 50 ) waketime = 50;
		sleep 10000 / waketime;
	}
}

StopMoving()
{
	signal SIG_MOVE;
	turn base to x-axis <0.0> speed <3.0>;
	move base to y-axis [0.0] speed [0.25];
}

SweetSpot(piecenum)
{
	piecenum = base;
}

StartDoorOpen()
{
	signal 4;
	set-signal-mask 4;
	move door1 to z-axis [-6] speed [60];
	wait-for-move door1 along z-axis;
	move door2 to z-axis [-5] speed [60];
	wait-for-move door2 along z-axis;
	move door3 to z-axis [-4] speed [60];
	wait-for-move door3 along z-axis;

}

StartDoorClose()
{
	move door1 to z-axis [0] speed [60];
	wait-for-move door1 along z-axis;
	move door2 to z-axis [0] speed [60];
	wait-for-move door2 along z-axis;
	move door3 to z-axis [0] speed [60];
	wait-for-move door3 along z-axis;


}


BoomCalc(posxz, posy, unitid)
{
	var Func_Var_3, Func_Var_4, Func_Var_5;
	Func_Var_3 = get PIECE_XZ(turret) - posxz;


if(get UNIT_HEIGHT(unitid)>1700000){
get PRINT(1111);

	Func_Var_4 = (posy - get PIECE_Y(turret)) + [9.0000000];
}else{
	Func_Var_4 = (posy - get PIECE_Y(turret))- [2.000000];

}


	Func_Var_5 = get XZ_HYPOT(Func_Var_3);
	TurretToUnitDistance = get HYPOT(Func_Var_5,Func_Var_4)  - [5.000000];

	get PRINT(get UNIT_HEIGHT(unitid));

	TurretToUnitAngleY = get XZ_ATAN(Func_Var_3);

	TurretToUnitAngleX = get ATAN(Func_Var_4,Func_Var_5);

	bInDistance = TurretToUnitDistance/65000 < maxDistance/65000; //MAX distance at which a unit is picked up/put down
if(!bInDistance){
//var msg;
//msg =`Unit to far from transport to be loaded.`;
//	get PRINT(msg);
}
	//get PRINT(1,TurretToUnitAngleX/182, TurretToUnitAngleY/182);
}


GroundCalc(posxz, posy,unitid)
{
	var Func_Var_3, Func_Var_4, Func_Var_5;
	Func_Var_3 = get PIECE_XZ(turret) - posxz;
if(get UNIT_HEIGHT(unitid)>1700000){

	Func_Var_4 = posy - get PIECE_Y(turret) + [4.5000000];
}else{
	Func_Var_4 = posy - get PIECE_Y(turret)- [3.0000000];

}

	Func_Var_5 = get XZ_HYPOT(Func_Var_3);
	TurretToUnitDistance = get HYPOT(Func_Var_5,Func_Var_4);//  - [3.000000];
	TurretToUnitAngleY = get XZ_ATAN(Func_Var_3);
	TurretToUnitAngleX = get ATAN(Func_Var_4,Func_Var_5);
	bInDistance = TurretToUnitDistance/65000 < maxDistance/65000; //MAX distance at which a unit is picked up/put down
if(!bInDistance){
//var msg;
//msg =`Unit to far from transport to be loaded.`;
//	get PRINT(msg);
}
	//get PRINT(1,TurretToUnitAngleX/182, TurretToUnitAngleY/182);
}


BoomExtendPickUp(unitid)
{
//	start-script StartDoorOpen();
	call-script BoomCalc(get UNIT_XZ(unitid),get UNIT_Y(unitid) + (get UNIT_HEIGHT(unitid)),unitid);
	turn arm1 to x-axis TurretToUnitAngleX speed pickUpSpeed;
//	wait-for-turn arm1 around x-axis;	
	turn turret to y-axis TurretToUnitAngleY - <180.0> speed turretSpeed;
//	wait-for-turn turret around y-axis;
}
BoomExtendPickUp2(unitid)
{

	call-script BoomCalc(get UNIT_XZ(unitid),get UNIT_Y(unitid)  + (get UNIT_HEIGHT(unitid)),unitid);
	move arm2 to z-axis -1*TurretToUnitDistance / 7 speed [16.000000];
	turn arm1 to x-axis TurretToUnitAngleX speed pickUpSpeed;
	wait-for-turn arm1 around x-axis;	
	turn turret to y-axis TurretToUnitAngleY - <180.0> speed turretSpeed;
//	wait-for-turn turret around y-axis;
}
BoomExtendPickUp3(unitid)
{

	call-script BoomCalc(get UNIT_XZ(unitid),get UNIT_Y(unitid) + (get UNIT_HEIGHT(unitid)) ,unitid);
	move arm3 to z-axis -1*TurretToUnitDistance / 7 speed [16.000000];
	turn arm1 to x-axis TurretToUnitAngleX speed pickUpSpeed;
	wait-for-turn arm1 around x-axis;	
	turn turret to y-axis TurretToUnitAngleY - <180.0> speed turretSpeed;
	//wait-for-turn turret around y-axis;
}
BoomExtendPickUp4(unitid)
{

	call-script BoomCalc(get UNIT_XZ(unitid),get UNIT_Y(unitid) + (get UNIT_HEIGHT(unitid)) ,unitid);
	move arm4 to z-axis -1*TurretToUnitDistance / 7 speed [16.000000];
	turn arm1 to x-axis TurretToUnitAngleX speed pickUpSpeed;
	wait-for-turn arm1 around x-axis;	
	turn turret to y-axis TurretToUnitAngleY - <180.0> speed turretSpeed;
//	wait-for-turn turret around y-axis;
}
BoomExtendPickUp5(unitid)
{

	call-script BoomCalc(get UNIT_XZ(unitid),get UNIT_Y(unitid) + (get UNIT_HEIGHT(unitid)) ,unitid);
	move arm5 to z-axis -1*TurretToUnitDistance / 7 speed [16.000000];
	turn arm1 to x-axis TurretToUnitAngleX speed pickUpSpeed;
	wait-for-turn arm1 around x-axis;	
	turn turret to y-axis TurretToUnitAngleY - <180.0> speed turretSpeed;
//	wait-for-turn turret around y-axis;
}
BoomExtendPickUp6(unitid)
{

	call-script BoomCalc(get UNIT_XZ(unitid),get UNIT_Y(unitid) + (get UNIT_HEIGHT(unitid)),unitid);
	move arm6 to z-axis -1*TurretToUnitDistance / 7 speed [16.000000];
	turn arm1 to x-axis TurretToUnitAngleX speed pickUpSpeed;
	wait-for-turn arm1 around x-axis;	
	turn turret to y-axis TurretToUnitAngleY - <180.0> speed turretSpeed;
//	wait-for-turn turret around y-axis;
}
BoomExtendPickUp7(unitid)
{

	call-script BoomCalc(get UNIT_XZ(unitid),get UNIT_Y(unitid) + (get UNIT_HEIGHT(unitid)) ,unitid);
	move arm7 to z-axis -1*TurretToUnitDistance / 7 speed [16.000000];
	turn arm1 to x-axis TurretToUnitAngleX speed pickUpSpeed;
	wait-for-turn arm1 around x-axis;	
	turn turret to y-axis TurretToUnitAngleY - <180.0> speed turretSpeed;
//	wait-for-turn turret around y-axis;
}
BoomExtendPickUp8(unitid)
{

	call-script BoomCalc(get UNIT_XZ(unitid),get UNIT_Y(unitid) + (get UNIT_HEIGHT(unitid)) ,unitid);
	wait-for-move arm2 along z-axis;
	turn arm1 to x-axis TurretToUnitAngleX speed pickUpSpeed;
	wait-for-turn arm1 around x-axis;	
	turn turret to y-axis TurretToUnitAngleY - <180.0> speed turretSpeed;
//	wait-for-turn turret around y-axis;
}
BoomExtendPickUp9(unitid)
{

	call-script BoomCalc(get UNIT_XZ(unitid),get UNIT_Y(unitid) + (get UNIT_HEIGHT(unitid)) ,unitid);
	wait-for-move arm3 along z-axis;
	turn arm1 to x-axis TurretToUnitAngleX speed pickUpSpeed;
	wait-for-turn arm1 around x-axis;	
	turn turret to y-axis TurretToUnitAngleY - <180.0> speed turretSpeed;
//wait-for-turn turret around y-axis;
}
BoomExtendPickUp10(unitid)
{

	call-script BoomCalc(get UNIT_XZ(unitid),get UNIT_Y(unitid) + (get UNIT_HEIGHT(unitid)) ,unitid);
	wait-for-move arm4 along z-axis;
	turn arm1 to x-axis TurretToUnitAngleX speed pickUpSpeed;
	wait-for-turn arm1 around x-axis;	
	turn turret to y-axis TurretToUnitAngleY - <180.0> speed turretSpeed;
//	wait-for-turn turret around y-axis;
}
BoomExtendPickUp11(unitid)
{

	call-script BoomCalc(get UNIT_XZ(unitid),get UNIT_Y(unitid) + (get UNIT_HEIGHT(unitid)) ,unitid);
	wait-for-move arm5 along z-axis;
	turn arm1 to x-axis TurretToUnitAngleX speed pickUpSpeed;
	wait-for-turn arm1 around x-axis;	
	turn turret to y-axis TurretToUnitAngleY - <180.0> speed turretSpeed;
//	wait-for-turn turret around y-axis;
}
BoomExtendPickUp12(unitid)
{

	call-script BoomCalc(get UNIT_XZ(unitid),get UNIT_Y(unitid)  + (get UNIT_HEIGHT(unitid)),unitid);
	wait-for-move arm6 along z-axis;
	turn arm1 to x-axis TurretToUnitAngleX speed pickUpSpeed;
	wait-for-turn arm1 around x-axis;	
	turn turret to y-axis TurretToUnitAngleY - <180.0> speed turretSpeed;
//	wait-for-turn turret around y-axis;
}
BoomExtendPickUp13(unitid)
{

	call-script BoomCalc(get UNIT_XZ(unitid),get UNIT_Y(unitid)  + (get UNIT_HEIGHT(unitid)),unitid);
	wait-for-move arm7 along z-axis;
	turn arm1 to x-axis TurretToUnitAngleX speed pickUpSpeed;
	wait-for-turn arm1 around x-axis;	
	turn turret to y-axis TurretToUnitAngleY - <180.0> speed turretSpeed;
//	wait-for-turn turret around y-axis;

}

BoomExtendDrop(position, unitid)
{
//	start-script StartDoorOpen();
	call-script GroundCalc(position,get GROUND_HEIGHT(position) ,unitid);// + get UNIT_HEIGHT(unitid));
	turn arm1 to x-axis TurretToUnitAngleX speed dropOffSpeed;
//	wait-for-turn arm1 around x-axis;	
	turn turret to y-axis TurretToUnitAngleY - <180.0> speed turretSpeed;




	move arm2 to z-axis -1*TurretToUnitDistance / 6 speed [16.000000];
	turn arm1 to x-axis TurretToUnitAngleX speed dropOffSpeed;
//	wait-for-turn arm1 around x-axis;	
	turn turret to y-axis TurretToUnitAngleY - <180.0> speed turretSpeed;
//	wait-for-turn turret around y-axis;
	call-script GroundCalc(position,get GROUND_HEIGHT(position) ,unitid);// + get UNIT_HEIGHT(unitid));

	move arm3 to z-axis -1*TurretToUnitDistance / 6 speed [16.000000];
	turn arm1 to x-axis TurretToUnitAngleX speed dropOffSpeed;
//	wait-for-turn arm1 around x-axis;	
	turn turret to y-axis TurretToUnitAngleY - <180.0> speed  turretSpeed;
//	wait-for-turn turret around y-axis;
	call-script GroundCalc(position,get GROUND_HEIGHT(position) ,unitid);// + get UNIT_HEIGHT(unitid));

	move arm4 to z-axis -1*TurretToUnitDistance / 6 speed [16.000000];
	turn arm1 to x-axis TurretToUnitAngleX speed dropOffSpeed;
//	wait-for-turn arm1 around x-axis;	
	turn turret to y-axis TurretToUnitAngleY - <180.0> speed  turretSpeed;
//	wait-for-turn turret around y-axis;
	call-script GroundCalc(position,get GROUND_HEIGHT(position) ,unitid);// + get UNIT_HEIGHT(unitid));

	move arm5 to z-axis -1*TurretToUnitDistance / 6 speed [16.000000];
	turn arm1 to x-axis TurretToUnitAngleX speed dropOffSpeed;
//	wait-for-turn arm1 around x-axis;	
	turn turret to y-axis TurretToUnitAngleY - <180.0> speed  turretSpeed;
//	wait-for-turn turret around y-axis;
	call-script GroundCalc(position,get GROUND_HEIGHT(position) ,unitid);// + get UNIT_HEIGHT(unitid));

	move arm6 to z-axis -1*TurretToUnitDistance / 6 speed [16.000000];
	turn arm1 to x-axis TurretToUnitAngleX speed dropOffSpeed;
//	wait-for-turn arm1 around x-axis;	
	turn turret to y-axis TurretToUnitAngleY - <180.0> speed  turretSpeed;
//	wait-for-turn turret around y-axis;
	call-script GroundCalc(position,get GROUND_HEIGHT(position) ,unitid);// + get UNIT_HEIGHT(unitid));

	move arm7 to z-axis -1*TurretToUnitDistance / 6 speed [16.000000];
	turn arm1 to x-axis TurretToUnitAngleX speed dropOffSpeed;
//	wait-for-turn arm1 around x-axis;	
	turn turret to y-axis TurretToUnitAngleY - <180.0> speed  turretSpeed;
//	wait-for-turn turret around y-axis;
	call-script GroundCalc(position,get GROUND_HEIGHT(position) ,unitid);// + get UNIT_HEIGHT(unitid));

	wait-for-move arm2 along z-axis;
	turn arm1 to x-axis TurretToUnitAngleX speed dropOffSpeed;
//	wait-for-turn arm1 around x-axis;	
	turn turret to y-axis TurretToUnitAngleY - <180.0> speed  turretSpeed;
//	wait-for-turn turret around y-axis;
	call-script GroundCalc(position,get GROUND_HEIGHT(position) ,unitid);// + get UNIT_HEIGHT(unitid));

	wait-for-move arm3 along z-axis;
	turn arm1 to x-axis TurretToUnitAngleX speed dropOffSpeed;
//	wait-for-turn arm1 around x-axis;	
	turn turret to y-axis TurretToUnitAngleY - <180.0> speed  turretSpeed;
//	wait-for-turn turret around y-axis;
	call-script GroundCalc(position,get GROUND_HEIGHT(position) ,unitid);// + get UNIT_HEIGHT(unitid));

	wait-for-move arm4 along z-axis;
	turn arm1 to x-axis TurretToUnitAngleX speed dropOffSpeed;
//	wait-for-turn arm1 around x-axis;	
	turn turret to y-axis TurretToUnitAngleY - <180.0> speed  turretSpeed;
//	wait-for-turn turret around y-axis;
	call-script GroundCalc(position,get GROUND_HEIGHT(position) ,unitid);// + get UNIT_HEIGHT(unitid));

	wait-for-move arm5 along z-axis;
	turn arm1 to x-axis TurretToUnitAngleX speed dropOffSpeed;
//	wait-for-turn arm1 around x-axis;	
	turn turret to y-axis TurretToUnitAngleY - <180.0> speed  turretSpeed;
//	wait-for-turn turret around y-axis;
	call-script GroundCalc(position,get GROUND_HEIGHT(position) ,unitid);// + get UNIT_HEIGHT(unitid));

	wait-for-move arm6 along z-axis;
	turn arm1 to x-axis TurretToUnitAngleX speed dropOffSpeed;
//	wait-for-turn arm1 around x-axis;	
	turn turret to y-axis TurretToUnitAngleY - <180.0> speed  turretSpeed;
//	wait-for-turn turret around y-axis;
	call-script GroundCalc(position,get GROUND_HEIGHT(position),unitid);// + get UNIT_HEIGHT(unitid));


	wait-for-move arm7 along z-axis;
	turn arm1 to x-axis TurretToUnitAngleX speed dropOffSpeed;
//	wait-for-turn arm1 around x-axis;	
	turn turret to y-axis TurretToUnitAngleY - <180.0> speed  turretSpeed;
//	wait-for-turn turret around y-axis;
	call-script GroundCalc(position,get GROUND_HEIGHT(position) ,unitid);// + get UNIT_HEIGHT(unitid));

}

BoomReset()
{
//	turn arm1 to x-axis <0.000000> speed <60.000000>;
//	wait-for-turn arm1 around x-axis;
	turn turret to y-axis <0.000000> speed <70.000000>;
	wait-for-turn turret around y-axis;
	move arm2 to z-axis [0.000000] speed boomResetSpeed;
	wait-for-move arm2 along z-axis;
	move arm3 to z-axis [0.000000] speed boomResetSpeed;
	wait-for-move arm3 along z-axis;
	move arm4 to z-axis [0.000000] speed boomResetSpeed;
	wait-for-move arm4 along z-axis;
	move arm5 to z-axis [0.000000] speed boomResetSpeed;
	wait-for-move arm5 along z-axis;
	move arm6 to z-axis [0.000000] speed boomResetSpeed;
	wait-for-move arm6 along z-axis;
	move arm7 to z-axis [0.000000] speed boomResetSpeed;
	wait-for-move arm7 along z-axis;
}

BoomUp(){
	turn arm1 to x-axis <0.000000> speed <55.000000>;
	
	//wait-for-turn arm1 around x-axis;
}
BoomToPad(unitid)
{
//	turn arm1 to x-axis <0.000000> speed <60.000000>;

	
	turn turret to y-axis <0.000000> speed <70.000000>;
//
	wait-for-turn turret around y-axis;
    call-script StartDoorOpen();


if(get UNIT_HEIGHT(unitid)>1700000){
get PRINT(77777);

		move link to y-axis 0 speed <100.00000>;
//	wait-for-move link along y-axis;

}	
	
		move arm2 to z-axis [-0.600000] speed boomToPadSpeed;
//	wait-for-move arm2 along z-axis;

	move arm3 to z-axis [-0.600000] speed boomToPadSpeed;
//	wait-for-move arm3 along z-axis;

	move arm4 to z-axis [-0.600000] speed boomToPadSpeed;
//	wait-for-move arm4 along z-axis;

	move arm5 to z-axis [-0.600000] speed boomToPadSpeed;
//	wait-for-move arm5 along z-axis;
	move arm6 to z-axis [-0.600000] speed boomToPadSpeed;
//	wait-for-move arm6 along z-axis;
	move arm7 to z-axis [-0.600000] speed boomToPadSpeed;
	wait-for-move arm7 along z-axis;
	
	
	
	turn arm1 to x-axis <-25.000000> speed <60.000000>;
	wait-for-turn arm1 around x-axis;
}


TransportPickup(unitid)
{
	call-script BoomCalc(get UNIT_XZ(unitid),get UNIT_Y(unitid) );// + get UNIT_HEIGHT(unitid));
	if( bInDistance AND get UNKNOWN_UNIT_VALUE(74)(unitid) == get UNKNOWN_UNIT_VALUE(74)(get UNKNOWN_UNIT_VALUE(71)) )
	{
		set BUSY to 1;


	if(TurretToUnitDistance< maxDistance ){
		call-script BoomExtendPickup(unitid);
	}else{
		call-script BoomReset();
	return;
	}
	
	if( TurretToUnitDistance< maxDistance  ){
		call-script BoomExtendPickup2(unitid);
	}else{
		call-script BoomReset();
	return;
	}
	if( TurretToUnitDistance< maxDistance  ){
		call-script BoomExtendPickup3(unitid);
	}else{
		call-script BoomReset();
	return;
	}
	if( TurretToUnitDistance< maxDistance ){
		call-script BoomExtendPickup4(unitid);
	}else{
		call-script BoomReset();
	return;
	}
	if( TurretToUnitDistance< maxDistance  ){
		call-script BoomExtendPickup5(unitid);
	}else{
		call-script BoomReset();
	return;
	}
	if( TurretToUnitDistance< maxDistance ){
		call-script BoomExtendPickup6(unitid);
	}else{
		call-script BoomReset();
	return;
	}
	if( TurretToUnitDistance< maxDistance  ){
		call-script BoomExtendPickup7(unitid);
	}else{
		call-script BoomReset();
	return;
	}
	if( TurretToUnitDistance< maxDistance  ){
		call-script BoomExtendPickup8(unitid);
	}else{
		call-script BoomReset();
	return;
	}
	if( TurretToUnitDistance< maxDistance  ){
		call-script BoomExtendPickup9(unitid);
	}else{
		call-script BoomReset();
	return;
	}
	if( TurretToUnitDistance< maxDistance  ){
		call-script BoomExtendPickup10(unitid);
	}else{
		call-script BoomReset();
	return;
	}
	if( TurretToUnitDistance< maxDistance ){
		call-script BoomExtendPickup11(unitid);
	}else{
		call-script BoomReset();
	return;
	}

	if( TurretToUnitDistance< maxDistance  ){
		call-script BoomExtendPickup12(unitid);
	}else{
		call-script BoomReset();
	return;
	}

	if( TurretToUnitDistance< maxDistance  ){
		call-script BoomExtendPickup13(unitid);
	}else{
		call-script BoomReset();
	return;
	}


	if( TurretToUnitDistance< maxDistance  ){
			call-script FocusPickUp(unitid);
	}


		

		call-script BoomToPad(unitid);
	if( TurretToUnitDistance< maxDistance ){

		attach-unit unitid to base;
	}else{
		call-script BoomReset();
	return;
	}		
	if( TurretToUnitDistance< maxDistance ){
		attach-unit unitid to 0 - 1;
	}

		start-script	StartDoorClose();

		start-script BoomUp();
		start-script BoomReset();
		



		set BUSY to 0;
	}
}



















BeginTransport(Func_Var_1)
{
//the unit stops moving.








}










EndTransport()
{
//the unit moves away from the drop zone



}


TransportDrop(unitid, position)
{
	call-script GroundCalc(position,get GROUND_HEIGHT(position)+ get UNIT_HEIGHT(unitid));
	if( bInDistance )
	{
		set BUSY to 1;
		start-script StartDoorOpen();

		call-script BoomToPad(unitid);

		move link to y-axis 0- get UNIT_HEIGHT(unitid) now;
//		move link to y-axis 0- get UNIT_WIDTH(unitid) now;
//		call-script FocusDropOff(unitid);
		attach-unit unitid to link;
	
		call-script BoomExtendDrop(position,unitid);
		call-script	StartDoorClose();
		call-script FocusDropOff(position);
		drop-unit unitid;
		call-script BoomReset();
	
		set BUSY to 0;
	}
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1 ;
		explode ground type BITMAPONLY | NOHEATCLOUD;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode door1 type BITMAPONLY | NOHEATCLOUD;
		explode door2 type BITMAPONLY | NOHEATCLOUD;
		explode door3 type BITMAPONLY | NOHEATCLOUD;
		explode turret type BITMAPONLY | NOHEATCLOUD;
		//explode arm1 type BITMAPONLY | NOHEATCLOUD;
		//explode arm2 type BITMAPONLY | NOHEATCLOUD;
		//explode arm3 type BITMAPONLY | NOHEATCLOUD;
		//explode arm4 type BITMAPONLY | NOHEATCLOUD;
		//explode arm5 type BITMAPONLY | NOHEATCLOUD;
		//explode arm6 type BITMAPONLY | NOHEATCLOUD;
		//explode arm7 type BITMAPONLY | NOHEATCLOUD;
		//explode magnet type FIRE | SMOKE | FALL | NOHEATCLOUD;
		//explode link type BITMAPONLY | NOHEATCLOUD;
		return(corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2 ;
		explode ground type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode door1 type FALL | NOHEATCLOUD;
		explode door2 type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode door3 type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode turret type FIRE | SMOKE | FALL | NOHEATCLOUD;
		//explode arm1 type FALL | NOHEATCLOUD;
		//explode arm2 type FIRE | SMOKE | FALL | NOHEATCLOUD;
		//explode arm3 type FALL | NOHEATCLOUD;
		//explode arm4 type FIRE | SMOKE | FALL | NOHEATCLOUD;
		//explode arm5 type FALL | NOHEATCLOUD;
		//explode arm6 type FIRE | SMOKE | FALL | NOHEATCLOUD;
		//explode arm7 type FALL | NOHEATCLOUD;
		//explode magnet type FALL | NOHEATCLOUD;
		//explode link type FIRE | SMOKE | FALL | NOHEATCLOUD;
		return(corpsetype);
	}
	if( severity <= 99 )
	{
		corpsetype = 3 ;
		explode ground type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode door1 type EXPLODE_ON_HIT | SMOKE | FALL | NOHEATCLOUD;
		explode door2 type EXPLODE_ON_HIT | SMOKE | FALL | NOHEATCLOUD;
		explode door3 type EXPLODE_ON_HIT | SMOKE | FALL | NOHEATCLOUD;
		explode turret type FIRE | SMOKE | FALL | NOHEATCLOUD;
		//explode arm1 type EXPLODE_ON_HIT | SMOKE | FALL | NOHEATCLOUD;
		//explode arm2 type SMOKE | FALL | NOHEATCLOUD;
		//explode arm3 type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		//explode arm4 type SMOKE | FALL | NOHEATCLOUD;
		//explode arm5 type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		//explode arm6 type SMOKE | FALL | NOHEATCLOUD;
		//explode arm7 type EXPLODE_ON_HIT | SMOKE | FALL | NOHEATCLOUD;
		//explode magnet type FIRE | SMOKE | FALL | NOHEATCLOUD;
		//explode link type FIRE | SMOKE | FALL | NOHEATCLOUD;
		return(corpsetype);
	}
	corpsetype = 3 ;
		explode ground type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode base type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode door1 type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		explode door2 type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		explode door3 type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode turret type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		//explode arm1 type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		//explode arm2 type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		//explode arm3 type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		//explode arm4 type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		//explode arm5 type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		//explode arm6 type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		//explode arm7 type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		//explode magnet type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		//explode link type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
	return corpsetype;
}
