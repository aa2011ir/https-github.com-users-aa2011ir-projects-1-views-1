#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, pole, turret, sleeve, barrel, flare, link, thrustrr, thrustrl, thrustfr, thrustfl, 
		thrustrra, thrustrla, thrustfra, thrustfla, 
		thrustrr2, thrustrl2, thrustfr2, thrustfl2, thrustrra2, thrustrla2, thrustfra2, thrustfla2;

static-var  moverate, unitviewer, statechg_DesiredState, statechg_StateChanging, restore_delay, wpn1_lasthead;

#define SIG_AIM				2


pickupscr()
{
	sleep 11;
}

dropoffscr()
{
	sleep 15;
}

#define BASEPIECE base
#define HITSPEED <55.0>
//how 'heavy' the unit is, on a scale of 1-10
#define UNITSIZE 5
#define MAXTILT 100


Create()
{
	hide thrustfra;
	hide thrustfla;
	hide thrustrla;
	hide thrustrra;
	hide thrustfra2;
	hide thrustfla2;
	hide thrustrla2;
	hide thrustrra2;
	
	turn thrustfra to x-axis <-90> now; 
	turn thrustfla to x-axis <-90> now; 
	turn thrustrla to x-axis <-90> now; 
	turn thrustrra to x-axis <-90> now; 
	turn thrustfra2 to x-axis <-90> now; 
	turn thrustfla2 to x-axis <-90> now; 
	turn thrustrla2 to x-axis <-90> now; 
	turn thrustrra2 to x-axis <-90> now; 
	
	turn pole to x-axis <45> now;
	
	hide link;
	unitviewer = FALSE;
	moverate = 0;
	call-script InitState();
	restore_delay = 300;
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	start-script IdleHover();
}

InitState()
{
	statechg_DesiredState = TRUE;
	statechg_StateChanging = FALSE;
}

RequestState(requestedstate, currentstate)
{
	if( statechg_StateChanging )
	{
		statechg_DesiredState = requestedstate;
		return (0);
	}
	statechg_StateChanging = TRUE;
	currentstate = statechg_DesiredState;
	statechg_DesiredState = requestedstate;
	while( statechg_DesiredState != currentstate )
	{
		if( statechg_DesiredState == 0 )
		{
			call-script pickupscr();
			currentstate = 0;
		}
		if( statechg_DesiredState == 1 )
		{
			call-script dropoffscr();
			currentstate = 1;
		}
	}
	statechg_StateChanging = FALSE;
}

#define IDLEHOVERSCALE 32
#define IDLEHOVERSPEED 60
#define IDLEBASEPIECE base
#include "idlehover.h"

//nani the what now
Demo()
{
	unitviewer = TRUE;
}


QueryTransport(Func_Var_1, Func_Var_2)
{
	Func_Var_1 = link;
}

BeginTransport(Func_Var_1)
{
	move link to y-axis [0.000000] - Func_Var_1 now;
	start-script RequestState(0);
}

EndTransport()
{
	start-script RequestState(1);
}

Activate()
{
	show thrustfra;
	show thrustfla;
	show thrustrla;
	show thrustrra;
	show thrustfra2;
	show thrustfla2;
	show thrustrla2;
	show thrustrra2;
	start-script RequestState(0);
}

Deactivate()
{
	hide thrustfra;
	hide thrustfla;
	hide thrustrla;
	hide thrustrra;
	hide thrustfra2;
	hide thrustfla2;
	hide thrustrla2;
	hide thrustrra2;
	start-script RequestState(1);
}

SweetSpot(piecenum)
{
	piecenum = base;
}

StopMoving()
{
	signal 8;
	moverate = 0;
}

MoveRate0()
{
	turn thrustrr to x-axis <0.000000> speed <80.000000>;
	turn thrustrl to x-axis <0.000000> speed <80.000000>;
	turn thrustfr to x-axis <0.000000> speed <80.000000>;
	turn thrustfl to x-axis <0.000000> speed <80.000000>;
	turn thrustrr2 to x-axis <0.000000> speed <80.000000>;
	turn thrustrl2 to x-axis <0.000000> speed <80.000000>;
	turn thrustfr2 to x-axis <0.000000> speed <80.000000>;
	turn thrustfl2 to x-axis <0.000000> speed <80.000000>;
}

MoveRate1()
{
	//get PRINT(1);
	signal 8;
	set-signal-mask 8;
	moverate = 1;
	turn thrustrr to x-axis <10.000000> speed <60.000000>;
	turn thrustrl to x-axis <10.000000> speed <60.000000>;
	turn thrustfr to x-axis <10.000000> speed <60.000000>;
	turn thrustfl to x-axis <10.000000> speed <60.000000>;
	turn thrustrr2 to x-axis <10.000000> speed <60.000000>;
	turn thrustrl2 to x-axis <10.000000> speed <60.000000>;
	turn thrustfr2 to x-axis <10.000000> speed <60.000000>;
	turn thrustfl2 to x-axis <10.000000> speed <60.000000>;
}

MoveRate2()
{
	signal 8;
	set-signal-mask 8;
	moverate = 2;
	turn thrustrr to x-axis <20.000000> speed <45.000000>;
	turn thrustrl to x-axis <20.000000> speed <45.000000>;
	turn thrustfr to x-axis <20.000000> speed <45.000000>;
	turn thrustfl to x-axis <20.000000> speed <45.000000>;
	turn thrustrr2 to x-axis <20.000000> speed <45.000000>;
	turn thrustrl2 to x-axis <20.000000> speed <45.000000>;
	turn thrustfr2 to x-axis <20.000000> speed <45.000000>;
	turn thrustfl2 to x-axis <20.000000> speed <45.000000>;
}

MoveRate3()
{
	signal 8;
	set-signal-mask 8;
	moverate = 3;
	turn thrustrr to x-axis <0.000000> speed <70.000000>;
	turn thrustrl to x-axis <0.000000> speed <70.000000>;
	turn thrustfr to x-axis <0.000000> speed <70.000000>;
	turn thrustfl to x-axis <0.000000> speed <70.000000>;
	turn thrustrr2 to x-axis <0.000000> speed <70.000000>;
	turn thrustrl2 to x-axis <0.000000> speed <70.000000>;
	turn thrustfr2 to x-axis <0.000000> speed <70.000000>;
	turn thrustfl2 to x-axis <0.000000> speed <70.000000>;
}

static-var  Stunned;
ExecuteRestoreAfterDelay()
{
    if (Stunned) {
        return (1);
    }
	spin barrel around z-axis speed <600.000000>;
	sleep restore_delay;
	spin barrel around z-axis speed <300.000000>;
	sleep (restore_delay / 2);
	spin barrel around z-axis speed <150.000000>;
	sleep (restore_delay / 4);
	stop-spin barrel around z-axis;
	wpn1_lasthead = 1000000;
	set-signal-mask 0;
}

SetStunned(State)
{
    Stunned = State;
	if (!Stunned) {
	    start-script ExecuteRestoreAfterDelay();
	}
}

RestoreAfterDelay()
{
	sleep restore_delay;
	start-script ExecuteRestoreAfterDelay();
}

AimPrimary(heading, pitch)
{
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	turn sleeve to y-axis heading speed <200.000000>;
	turn sleeve to x-axis <0.000000> - <45> - pitch speed <100.000000>;
	if (((get ABS(wpn1_lasthead - heading)) > 65536) OR(((get ABS(wpn1_lasthead - heading)) > 1300) AND ((get ABS(wpn1_lasthead - heading)) < 64236)))
	{
		wpn1_lasthead = 1000000;
		wait-for-turn pole around y-axis;
		wait-for-turn sleeve around x-axis;
	}
	wpn1_lasthead = heading;
	start-script RestoreAfterDelay();
	return (1);
}

FirePrimary()
{
	spin barrel around z-axis speed <900.000000>;
	emit-sfx 1024 + 0 from flare;
}

AimFromPrimary(piecenum)
{
	piecenum = sleeve;
}

QueryPrimary(piecenum)
{
	piecenum = flare;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode thrustfl type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode thrustfla type BITMAPONLY | NOHEATCLOUD;
		explode thrustfr type BITMAPONLY | NOHEATCLOUD;
		explode thrustfra type BITMAPONLY | NOHEATCLOUD;
		explode thrustrl type BITMAPONLY | NOHEATCLOUD;
		explode thrustrla type BITMAPONLY | NOHEATCLOUD;
		explode thrustrr type BITMAPONLY | NOHEATCLOUD;
		explode thrustrra type BITMAPONLY | NOHEATCLOUD;
		explode link type BITMAPONLY | NOHEATCLOUD;
		return(corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode thrustfl type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode thrustfla type BITMAPONLY | NOHEATCLOUD;
		explode thrustfr type BITMAPONLY | NOHEATCLOUD;
		explode thrustfra type BITMAPONLY | NOHEATCLOUD;
		explode thrustrl type BITMAPONLY | NOHEATCLOUD;
		explode thrustrla type BITMAPONLY | NOHEATCLOUD;
		explode thrustrr type BITMAPONLY | NOHEATCLOUD;
		explode thrustrra type BITMAPONLY | NOHEATCLOUD;
		explode link type BITMAPONLY | NOHEATCLOUD;
		explode link type FALL | NOHEATCLOUD;
		return(corpsetype);
	}
	if( severity <= 99 )
	{
		corpsetype = 3 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode thrustfl type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode thrustfla type BITMAPONLY | NOHEATCLOUD;
		explode thrustfr type BITMAPONLY | NOHEATCLOUD;
		explode thrustfra type BITMAPONLY | NOHEATCLOUD;
		explode thrustrl type BITMAPONLY | NOHEATCLOUD;
		explode thrustrla type BITMAPONLY | NOHEATCLOUD;
		explode thrustrr type BITMAPONLY | NOHEATCLOUD;
		explode thrustrra type BITMAPONLY | NOHEATCLOUD;
		explode link type EXPLODE_ON_HIT | SMOKE | FALL | NOHEATCLOUD;
		return(corpsetype);
	}
	corpsetype = 3 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode thrustfl type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode thrustfla type BITMAPONLY | NOHEATCLOUD;
		explode thrustfr type BITMAPONLY | NOHEATCLOUD;
		explode thrustfra type BITMAPONLY | NOHEATCLOUD;
		explode thrustrl type BITMAPONLY | NOHEATCLOUD;
		explode thrustrla type BITMAPONLY | NOHEATCLOUD;
		explode thrustrr type BITMAPONLY | NOHEATCLOUD;
		explode thrustrra type BITMAPONLY | NOHEATCLOUD;
		explode link type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
	return corpsetype;
}
