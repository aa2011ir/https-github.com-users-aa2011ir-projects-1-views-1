
#include "../recoil_common_includes.h"

piece  ground, rmis, lmis, rlauncher, llauncher, flare, turret, wake, support, cannon,
       body, base;

static-var  isAiming; 

// Signal definitions
#define SIGNAL_AIM1 256
#define SIGNAL_AIM2 512
#define SIGNAL_MOVE 1
#define SIGNAL_IDLE 8


#define HOVER_BASE base
#define HOVER_BANKSPEED <7>
#define HOVER_ROCKBASE ground
#define HOVER_WOBBLE_PERIOD 80
#define HOVER_WOBBLE_AMPLITUDE [0.7]
#define HOVER_WAKEPIECE wake
#define HOVER_WAKE_SFX_1 1024 + 0
#define HOVER_WAKE_SFX_2 1024 + 1
#define HOVER_IDLE_SFX 1024 + 2
#include "../bar_hovercraft_common.h"


#define BASEPIECE base
#define HITSPEED <25.0>
//how 'heavy' the unit is, on a scale of 1-10
#define UNITSIZE 10
#define MAXTILT 200

#include "../unit_hitbyweaponid_and_smoke.h"


Create()
{
	hide wake;
	hide flare;
	hide rmis;
	hide lmis;
	isAiming = FALSE;
	start-script HoverCraftMotion();
}

static-var  Stunned;
ExecuteRestoreAfterDelay()
{
    if (Stunned) {
        return (1);
    }
	turn turret to y-axis <0.0> speed <75.0>;
	turn support to x-axis <0.0> speed <50.0>;
	
	isAiming = FALSE;
}
SetStunned(State)
{
    Stunned = State;
	if (!Stunned) {
	    start-script ExecuteRestoreAfterDelay();
	}
}
RestoreAfterDelay()
{
	sleep 8000;
	start-script ExecuteRestoreAfterDelay();
}

QueryWeapon1(pieceIndex)
{
	pieceIndex = flare;
}

AimFromWeapon1(pieceIndex)
{
	pieceIndex = turret;
}

FireWeapon1()
{	
	emit-sfx 1024 + 0 from flare;
	move cannon to z-axis [-10.0] speed [1250.0];
	sleep 150;
	move cannon to z-axis [0.0] speed [7.50000];
}

AimWeapon1(heading, pitch)
{
	signal SIGNAL_AIM1;
	set-signal-mask SIGNAL_AIM1;
	isAiming = TRUE;
	turn turret to y-axis heading speed <120.0>;
	turn support to x-axis <0.0> - pitch speed <80.0>;
	wait-for-turn turret around y-axis;
	wait-for-turn support around x-axis;
	start-script RestoreAfterDelay();
	return (1);
}

QueryWeapon2(pieceIndex)
{
	pieceIndex = base;
}

AimFromWeapon2(pieceIndex)
{
	pieceIndex = base;
}

FireWeapon2()
{	
}

AimWeapon2(heading, pitch)
{
	signal SIGNAL_AIM2;
	set-signal-mask SIGNAL_AIM2;
	start-script RestoreAfterDelay();
	return (1);
}



Killed(severity, corpsetype)
{
	hide flare;
	hide rmis;
	hide lmis;

	if( severity <= 25 )
	{
		corpsetype = 1;
		explode base type FIRE | SMOKE | FALL | NOHEATCLOUD;
		return (corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode cannon type FALL | BITMAP1 | NOHEATCLOUD;
		explode base type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode turret type FIRE | SMOKE | FALL | BITMAP4 | NOHEATCLOUD;
		return (corpsetype);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode cannon type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1 | NOHEATCLOUD;
		explode base type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode body type FIRE | SMOKE | FALL | BITMAP4 | NOHEATCLOUD;
		explode turret type FIRE | SMOKE | FALL | BITMAP4 | NOHEATCLOUD;
		return (corpsetype);
	}
	corpsetype = 3;
	explode cannon type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1 | NOHEATCLOUD;
	explode base type FIRE | SMOKE | FALL | NOHEATCLOUD;
	explode body type FIRE | SMOKE | FALL | EXPLODE_ON_HIT | BITMAP4 | NOHEATCLOUD;
	explode support type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3 | NOHEATCLOUD;
	explode turret type FIRE | SMOKE | FALL | EXPLODE_ON_HIT | BITMAP4 | NOHEATCLOUD;
	return (corpsetype);
}
